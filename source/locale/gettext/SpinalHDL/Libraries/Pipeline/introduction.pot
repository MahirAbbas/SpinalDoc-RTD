# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2025, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-01 09:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:3
msgid "Introduction"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:5
msgid "``spinal.lib.misc.pipeline`` provides a pipelining API. The main advantages over manual pipelining are :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:7
msgid "You don't have to predefine all the signal elements needed for the entire staged system upfront. You can create and consume stageable signals in a more ad hoc fashion as your design requires - without needing to refactor all the intervening stages to know about the signal"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:8
msgid "Signals of the pipeline can utilize the powerful parametrization capabilities of SpinalHDL and be subject to optimization/removal if a specific design build does not require a particular parametrized feature, without any need to modify the staging system design or project code base in a significant way."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:9
msgid "Manual retiming is much easier, as you don't have to handle the registers / arbitration manually"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:10
msgid "Manage the arbitration by itself"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:12
msgid "The API is composed of 4 main things :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:14
msgid "``Node`` : which represents a layer in the pipeline"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:15
msgid "``Link`` : which allows to connect nodes to each other"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:16
msgid "``Builder`` : which will generate the hardware required for a whole pipeline"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:17
msgid "``Payload`` : which are used to retrieve hardware signals on nodes along the pipeline"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:19
msgid "It is important to understand that ``Payload`` isn't a hardware data/signal instance, but a key to retrieve a data/signal on nodes along the pipeline, and that the pipeline builder will then automatically interconnect/pipeline every occurrence of a given ``Payload`` between nodes."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:23
msgid "Here is an example to illustrate :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:29
msgid "Here is a video about this API :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:31
msgid "https://www.youtube.com/watch?v=74h_-FMWWIM"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:34
msgid "Simple example"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:36
msgid "Here is a simple example which only uses the basics of the API :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:80
msgid "This will produce the following hardware :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:85
msgid "Here is a simulation wave :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:107
msgid "Here is the same example but using more of the API :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:151
msgid "Payload"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:153
msgid "``Payload`` objects are used to refer to data which can go through the pipeline. Technically speaking, ``Payload`` is a ``HardType`` which has a name and is used as a \"key\" to retrieve the signals in a certain pipeline stage."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:168
msgid "Note that I got used to name the ``Payload`` instances using uppercase. This is to make it very explicit that the thing isn't a hardware signal, but are more like a \"key/type\" to access things."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:172
msgid "Node"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:174
msgid "``Node`` mostly hosts the valid/ready arbitration signals, and the hardware signals required for all the ``Payload`` values going through it."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:177
msgid "You can access its arbitration via :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:184
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:250
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:280
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:405
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:444
msgid "API"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:185
msgid "Access"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:186
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:230
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:251
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:281
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:406
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:445
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:187
msgid "``node.valid``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:188
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:191
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:194
msgid "RW"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:189
msgid "Is the signal which specifies if a transaction is present on the node. It is driven by the upstream. Once asserted, it must only be de-asserted the cycle after which either both ``valid`` and ``ready`` or ``node.cancel`` are high. ``valid`` must not depend on ``ready``."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:190
msgid "``node.ready``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:192
msgid "Is the signal which specifies if the node's transaction can proceed downstream. It is driven by the downstream to create backpressure. The signal has no meaning when there is no transaction (``node.valid`` being deasserted)."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:193
msgid "``node.cancel``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:195
msgid "Is the signal which specifies if the node's transaction in being canceled from the pipeline. It is driven by the downstream. The signal has no meaning when there is no transaction (``node.valid`` being deasserted)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:196
msgid "``node.isValid``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:197
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:200
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:203
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:206
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:209
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:214
msgid "RO"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:198
msgid "``node.valid``'s read only accessor"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:199
msgid "``node.isReady``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:201
msgid "``node.ready``'s read only accessor"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:202
msgid "``node.isCancel``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:204
msgid "``node.cancel``'s read only accessor"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:205
msgid "``node.isFiring``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:207
msgid "``True`` when the node transaction is successfully moving further (``valid && ready && !cancel``). Useful to commit state changes."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:208
msgid "``node.isMoving``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:210
msgid "``True`` when the node transaction will not be present anymore on the node (starting from the next cycle), either because downstream is ready to take the transaction, or because the transaction is canceled from the pipeline (``valid && (ready || cancel)``). Useful to \"reset\" states."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:213
msgid "``node.isCanceling``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:215
msgid "True when the node transaction is being cleaned up. Meaning that it will not appear anywhere in the pipeline in future cycles. It is equivalent to ``isValid && isCancel``."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:217
msgid "Note that the ``node.valid``/``node.ready`` signals follows the same conventions than the :doc:`../stream`'s ones ."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:220
msgid "The ``Node`` controls (``valid``/``ready``/``cancel``) and status (``isValid``, ``isReady``, ``isCancel``, ``isFiring``, ...) signals are created on demand. So for instance you can create pipelines with no backpressure by never referring to the ready signal. That's why it is important to use status signals when you want to read the status of something and only use control signals when you want to drive something."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:226
msgid "Here is a list of arbitration cases you can have on a node. ``valid``/``ready``/``cancel`` define the state we are in, while ``isFiring``/``isMoving`` result of those :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:230
msgid "valid"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:230
msgid "ready"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:230
msgid "cancel"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:230
msgid "isFiring"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:230
msgid "isMoving"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:232
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:234
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:236
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:238
msgid "0"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:232
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:238
msgid "X"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:232
msgid "No transaction"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:234
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:236
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:238
msgid "1"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:234
msgid "Going through"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:236
msgid "Blocked"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:238
msgid "Canceled"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:242
msgid "Note that if you want to model things like for instance a CPU stage which can block and flush stuff, take a look a the CtrlLink, as it provides the API to do such things."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:244
msgid "You can access signals referenced by a Payload via:"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:252
msgid "``node(Payload)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:253
msgid "Return the corresponding hardware signal"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:254
msgid "``node(Payload, Any)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:255
msgid "Same as above, but include a second argument which is used as a \"secondary key\". This eases the construction of multi-lane hardware. For instance, when you have a multi issue CPU pipeline, you can use the lane Int id as secondary key"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:256
msgid "``node.insert(Data)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:257
msgid "Return a new Payload instance which is connected to the given Data hardware signal"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:273
msgid "While you can manually drive/read the arbitration/data of the first/last stage of your pipeline, there is a few utilities to connect its boundaries."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:282
msgid "``node.arbitrateFrom(Stream[T]])``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:283
msgid "Drive a node arbitration from a ``Stream``."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:284
msgid "``node.arbitrateFrom(Flow[T]])``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:285
msgid "Drive a node arbitration from a ``Flow``."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:286
msgid "``node.arbitrateTo(Stream[T]])``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:287
msgid "Drive a ``Stream`` arbitration from the node."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:288
msgid "``node.arbitrateTo(Flow[T]])``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:289
msgid "Drive a ``Flow`` arbitration from the node."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:290
msgid "``node.driveFrom(Stream[T]])((Node, T) => Unit)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:291
msgid "Drive a node from a stream. The provided lambda function can be use to connect the data."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:292
msgid "``node.driveFrom(Flow[T]])((Node, T) => Unit)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:293
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:297
msgid "Same as above but for ``Flow``."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:294
msgid "``node.driveTo(Stream[T]])((T, Node) => Unit)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:295
msgid "Drive a stream from the node. The provided lambda function can be use to connect the data."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:296
msgid "``node.driveTo(Flow[T]])((T, Node) => Unit)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:317
msgid "In order to reduce verbosity, there is a set of implicit conversions between ``Payload`` toward their data representation which can be used when you are in the context of a ``Node`` :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:328
msgid "You can also use those implicit conversions by importing them :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:341
msgid "There is also an API which allows you to create new ``Area`` which provide the whole API of a given node instance (including implicit conversion) without import :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:353
msgid "Such feature is very useful when you have parametrizable pipeline locations for your hardware (see retiming example)."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:357
msgid "Links"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:359
msgid "There is few different ``Link`` already implemented (but you could also create your own custom one). The idea of links is to connect two nodes together in various ways. They generally have a ``up`` Node and a ``down`` ``Node``."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:364
msgid "DirectLink"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:366
msgid "Very simple, it connect two nodes with signals only. Here is an example :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:375
msgid "StageLink"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:377
msgid "This connect two nodes using registers on the ``data``/``valid`` signals and some arbitration on the ``ready``."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:385
msgid "S2mLink"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:387
msgid "This connect two nodes using registers on the ``ready`` signal, which can be useful to improve backpressure combinatorial timings."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:394
msgid "CtrlLink"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:396
msgid "This is a kind of special ``Link``, as it connects two nodes with optional flow control / bypass logic. Its API should be flexible enough to implement a CPU stage with it."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:399
msgid "Here is its flow control API (The Bool arguments enable the features) :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:407
msgid "``haltWhen(Bool)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:408
msgid "Allows to block the current transaction (clear ``up.ready`` and ``down.valid``)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:409
msgid "``throwWhen(Bool)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:410
msgid "Allows to cancel the current transaction from the pipeline (clear ``down.valid`` and make the transaction driver forget its current state)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:411
msgid "``forgetOneWhen(Bool)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:412
msgid "Allows to request the upstream to forget its current transaction (but doesn't clear the ``down.valid``)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:413
msgid "``ignoreReadyWhen(Bool)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:414
msgid "Allows to ignore the downstream ready (set ``up.ready``)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:415
msgid "``duplicateWhen(Bool)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:416
msgid "Allows to duplicate the current transaction (clear ``up.ready``)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:417
msgid "``terminateWhen(Bool)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:418
msgid "Allows to hide the current transaction from downstream (clear ``down.valid``)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:420
msgid "Also note that if you want to do flow control in a conditional scope (ex in a ``when`` statement), you can call the following functions :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:423
msgid "``haltIt()``, ``duplicateIt()``, ``terminateIt()``, ``forgetOneNow()``, ``ignoreReadyNow()``, ``throwIt()``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:436
msgid "You can retrieve which nodes are connected to the ``Link`` using ``node.up`` / ``node.down``."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:438
msgid "The ``CtrlLink`` also provide an API to access ``Payload`` :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:446
msgid "``link(Payload)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:447
msgid "Same as ``Link.down(Payload)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:448
msgid "``link(Payload, Any)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:449
msgid "Same as ``Link.down(Payload, Any)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:450
msgid "``link.insert(Data)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:451
msgid "Same as ``Link.down.insert(Data)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:452
msgid "``link.bypass(Payload)``"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:453
msgid "Allows to conditionally override a ``Payload`` value between ``link.up`` -> ``link.down``. This can be used to fix data hazard in CPU pipelines for instance."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:472
msgid "Note that if you create a ``CtrlLink`` without node arguments, it will create its own nodes internally."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:483
msgid "Other Links"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:485
msgid "There is also a ``JoinLink`` / ``ForkLink`` implemented."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:488
msgid "Your custom Link"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:490
msgid "You can implement your custom links by implementing the ``Link`` base class."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:503
msgid "But that API may change a bit, as it is still fresh."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:506
msgid "Builders"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:508
msgid "To generate the hardware of your pipeline, you need to give a list of all the links used in your pipeline."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:523
msgid "There is also a set of \"all in one\" builders that you can instantiate to help yourself."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:526
msgid "StagePipeline"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:528
msgid "For instance there is the ``StagePipeline`` class which serve two purposes : - It ease the creation of simple pipelines which are composed of : ``Node`` -> ``StageLink`` -> ``Node`` -> ``StageLink`` -> ... - It extends the pipeline length on the fly"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:532
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:573
msgid "Here is an example which :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:534
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:575
msgid "Take the input at stage 0"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:535
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:576
msgid "Sum the input at stage 1"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:536
msgid "Square the sum at stage 2"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:537
#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:578
msgid "Provide the result at stage 3"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:568
msgid "StageCtrlPipeline"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:570
msgid "Very similar to ``StagePipeline``, but it replace Nodes by ``CtrlLink``, allowing to handle the arbitration / bypasses on each stages, which is for instance quite useful for CPU designs."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:577
msgid "Check the sum value and eventually drop the transaction at stage 2"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:612
msgid "Composability"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:614
msgid "One good thing about the API is that it easily allows to compose a pipeline with multiple parallel things. What it means by \"compose\" is that sometime the pipeline you need to design has parallel processing to do."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:617
msgid "Imagine you need to do floating point multiplication on 4 pairs of numbers (to later sum them). If those 4 pairs are provided at the same time by a single stream of data, then you don't want 4 different pipelines to multiply them, instead you want to process them all in parallel in the same pipeline."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:621
msgid "The example below show a pattern which composes a pipeline with multiple lanes to process them in parallel."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:666
msgid "This will produce the following data path (assuming ``lanesCount = 2``), arbitration not being shown :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:673
msgid "Retiming / Variable length"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:675
msgid "Sometime you want to design a pipeline, but you don't really know where the critical paths will be and what the right balance between stages is. And often you can't rely on the synthesis tool doing a good job with automatic retiming."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:679
msgid "So, you kind of need a easy way to move the logic of your pipeline around."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:681
msgid "Here is how it can be done with this pipelining API :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:743
msgid "If then you generate this component like this :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:756
msgid "You will get 4 stages separated by 3 layers of flip-flops doing your processing :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:761
msgid "Note the generated hardware verilog is kinda clean (by my standards at least :P) :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:876
msgid "Also, you can easily tweak how many stages and where you want the processing to be done, for instance you may want to move the inversion hardware to the same stage as the adder. This can be done the following way :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:891
msgid "When you may want to remove the output register stage :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:905
msgid "One thing about this example is the necessity intermediate val as ``addNode``. I mean :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:915
msgid "Unfortunately, scala doesn't allow to replace `new addNode.Area` with `new nodes(addAt).Area`. One workaround is to define a class as :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:925
msgid "Depending the scale of your pipeline, it can payoff."
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:928
msgid "Simple CPU example"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:930
msgid "Here is a simple/stupid 8 bits CPU example with :"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:932
msgid "3 stages (fetch, decode, execute)"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:933
msgid "embedded fetch memory"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:934
msgid "add / jump / led /delay instructions"
msgstr ""

#: ../../SpinalHDL/Libraries/Pipeline/introduction.rst:1005
msgid "Here is a simple testbench which implement a loop which will make the led counting up."
msgstr ""
