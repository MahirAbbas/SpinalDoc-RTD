# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2025, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-29 08:51+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Other language features/report.rst:3
msgid "Report"
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:5
msgid "You can add debugging in RTL for simulation, using the following syntax:"
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:21
msgid "It will generate the following Verilog code for example:"
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:27
msgid "Since SpinalHDL 1.4.4, the following syntax is also supported:"
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:33
msgid "You can display the current simulation time using the `REPORT_TIME` object:"
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:39
msgid "will result in:"
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:45
msgid "**Automatic Handling of Scala Primitive Types (SpinalHDL ^1.12.2)**"
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:47
msgid "You can embed Scala primitive types (e.g., `Int`, `Boolean`, `Float`, `BigInt`, `BigDecimal`, `Char`, `Byte`, `Short`, `Long`) within `L\"\"` interpolated strings without explicit `.toString()` calls."
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:63
msgid "**Structured Reporting for Complex Data Types (like Bundles) (SpinalHDL ^1.12.2)**"
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:65
msgid "For `Bundle`s or other complex data structures, you can define a `Formattable` trait and implement a `format()` method returning `Seq[Any]` to define a structured, nested representation. This allows for clean, one-line reporting of entire complex objects."
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:67
msgid "First, define a `Formattable` trait and implement it in your Bundles:"
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:94
msgid "Then, you can report the entire structure:"
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:104
msgid "This will produce a compact, readable output like:"
msgstr ""

#: ../../SpinalHDL/Other language features/report.rst:107
msgid "PacketHeader(packetLength=0x0c, packetType=0x1, payload=DataPayload(value=0x5678, checksum=0x78))"
msgstr ""
