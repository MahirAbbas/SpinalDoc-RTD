
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-"
"Date:2023-12-01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-"
"Translator:FULL NAME <EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN "
"<LL@li.org>Plural-Forms:nplurals=1; plural=0;MIME-Version:1.0Content-"
"Type:text/plain; charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2023-12-02 00:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../SpinalHDL/Data types/bundle.rst:5
msgid "Bundle"
msgstr "捆"

#: ../../SpinalHDL/Data types/bundle.rst:8 types/bundle.rst:64
#: types/bundle.rst:97 types/bundle.rst:121
msgid "Description"
msgstr "描述"

#: ../../SpinalHDL/Data types/bundle.rst:10
msgid ""
"The ``Bundle`` is a composite type that defines a group of named signals "
"(of any SpinalHDL basic type) under a single name."
msgstr "“Bundle” 是一种复合类型，它在单个名称下定义一组命名信号（任何 SpinalHDL 基本类型）。"

#: ../../SpinalHDL/Data types/bundle.rst:12
msgid "A ``Bundle`` can be used to model data structures, buses, and interfaces."
msgstr "“Bundle”可用于对数据结构、总线和接口进行建模。"

#: ../../SpinalHDL/Data types/bundle.rst:15
msgid "Declaration"
msgstr "宣言"

#: ../../SpinalHDL/Data types/bundle.rst:17
msgid "The syntax to declare a bundle is as follows:"
msgstr "声明bundle的语法如下："

#: ../../SpinalHDL/Data types/bundle.rst:27
msgid "For example, a bundle holding a color could be defined as:"
msgstr "例如，包含颜色的包可以定义为："

#: ../../SpinalHDL/Data types/bundle.rst:35
msgid ""
"You can find an :ref:`APB3 definition <example_apb3>` among the "
":ref:`Spinal HDL examples <example_list>`."
msgstr "您可以在:ref:`Spinal HDL 示例 <example_list>` 中找到:ref:`APB3 定义 <example_apb3>`。"

#: ../../SpinalHDL/Data types/bundle.rst:38
msgid "Conditional signals"
msgstr "条件信号"

#: ../../SpinalHDL/Data types/bundle.rst:39
msgid ""
"The signals in the ``Bundle`` can be defined conditionally. Unless "
"``dataWidth`` is greater than 0, there will be no ``data`` signal in "
"elaborated ``myBundle``, as demonstrated in the example below."
msgstr ""
"“Bundle”中的信号可以有条件地定义。除非“dataWidth”大于 "
"0，否则在详细的“myBundle”中将不会有“data”信号，如下例所示。"

#: ../../SpinalHDL/Data types/bundle.rst:50
msgid ""
"See also :ref:`generate <generate>` for information about this SpinalHDL "
"method."
msgstr ""

#: ../../SpinalHDL/Data types/bundle.rst:53
msgid "Operators"
msgstr "运营商"

#: ../../SpinalHDL/Data types/bundle.rst:55
msgid "The following operators are available for the ``Bundle`` type:"
msgstr "以下运算符可用于“Bundle”类型："

#: ../../SpinalHDL/Data types/bundle.rst:58
msgid "Comparison"
msgstr "比较"

#: ../../SpinalHDL/Data types/bundle.rst:63 types/bundle.rst:96
#: types/bundle.rst:120
msgid "Operator"
msgstr "操作员"

#: ../../SpinalHDL/Data types/bundle.rst:65
msgid "Return type"
msgstr "返回类型"

#: ../../SpinalHDL/Data types/bundle.rst:66
msgid "x === y"
msgstr "x === y"

#: ../../SpinalHDL/Data types/bundle.rst:67
msgid "Equality"
msgstr "平等"

#: ../../SpinalHDL/Data types/bundle.rst:68 types/bundle.rst:71
msgid "Bool"
msgstr "布尔"

#: ../../SpinalHDL/Data types/bundle.rst:69
msgid "x =/= y"
msgstr "x =/= y"

#: ../../SpinalHDL/Data types/bundle.rst:70
msgid "Inequality"
msgstr "不等式"

#: ../../SpinalHDL/Data types/bundle.rst:91
msgid "Type cast"
msgstr "类型转换"

#: ../../SpinalHDL/Data types/bundle.rst:98 types/bundle.rst:122
msgid "Return"
msgstr "返回"

#: ../../SpinalHDL/Data types/bundle.rst:99
msgid "x.asBits"
msgstr "x.asBits"

#: ../../SpinalHDL/Data types/bundle.rst:100
msgid "Binary cast to Bits"
msgstr "二进制转换为 Bits"

#: ../../SpinalHDL/Data types/bundle.rst:101
msgid "Bits(w(x) bits)"
msgstr "位（w(x) 位）"

#: ../../SpinalHDL/Data types/bundle.rst:108
#, fuzzy
msgid ""
"The elements of the bundle will be mapped into place in the order in "
"which they are defined, LSB first. Thus, ``r`` in ``color1`` will occupy "
"bits 0 to 8 of ``myBits`` (LSB), followed by ``g`` and ``b`` in that "
"order, with ``b.msb`` also being the MSB of the resulting Bits type."
msgstr ""
"捆绑包的元素将按照它们定义的顺序映射到位。因此，“color1”中的“r”将占据“myBits”的位 0 到 8 "
"(LSB)，然后按顺序依次是“g”和“b”。"

#: ../../SpinalHDL/Data types/bundle.rst:113
msgid "Convert Bits back to Bundle"
msgstr "将位转换回捆绑包"

#: ../../SpinalHDL/Data types/bundle.rst:114
msgid ""
"The ``.assignFromBits`` operator can be viewed as the reverse of "
"``.asBits``."
msgstr "``.assignFromBits`` 运算符可以被视为``.asBits`` 的逆操作。"

#: ../../SpinalHDL/Data types/bundle.rst:123
msgid "x.assignFromBits(y)"
msgstr "x.assignFromBits(y)"

#: ../../SpinalHDL/Data types/bundle.rst:124
msgid "Convert Bits (y) to Bundle(x)"
msgstr "将位 (y) 转换为捆绑 (x)"

#: ../../SpinalHDL/Data types/bundle.rst:125 types/bundle.rst:128
msgid "Unit"
msgstr "单元"

#: ../../SpinalHDL/Data types/bundle.rst:126
msgid "x.assignFromBits(y, hi, lo)"
msgstr "x.assignFromBits(y, hi, lo)"

#: ../../SpinalHDL/Data types/bundle.rst:127
msgid "Convert Bits (y) to Bundle(x) with high/low boundary"
msgstr "将位 (y) 转换为具有高/低边界的 Bundle(x)"

#: ../../SpinalHDL/Data types/bundle.rst:130
msgid ""
"The following example saves a Bundle called CommonDataBus into a circular"
" buffer (3rd party memory), reads the Bits out later and converts them "
"back to CommonDataBus format."
msgstr ""
"以下示例将名为 CommonDataBus 的 Bundle 保存到循环缓冲区（第 3 方内存）中，稍后读取位并将其转换回 "
"CommonDataBus 格式。"

#: ../../SpinalHDL/Data types/bundle.rst:162
msgid "IO Element direction"
msgstr "IO元件方向"

#: ../../SpinalHDL/Data types/bundle.rst:164
msgid ""
"When you define a ``Bundle`` inside the IO definition of your component, "
"you need to specify its direction."
msgstr "当您在组件的 IO 定义中定义“Bundle”时，您需要指定其方向。"

#: ../../SpinalHDL/Data types/bundle.rst:167
msgid "in/out"
msgstr "进出"

#: ../../SpinalHDL/Data types/bundle.rst:169
msgid ""
"If all elements of your bundle go in the same direction you can use "
"``in(MyBundle())`` or ``out(MyBundle())``."
msgstr "如果捆绑包的所有元素都朝同一方向移动，则可以使用“in(MyBundle())”或“out(MyBundle())”。"

#: ../../SpinalHDL/Data types/bundle.rst:171 types/bundle.rst:190
msgid "For example:"
msgstr "例如："

#: ../../SpinalHDL/Data types/bundle.rst:181
msgid "master/slave"
msgstr "主从"

#: ../../SpinalHDL/Data types/bundle.rst:183
msgid ""
"If your interface obeys to a master/slave topology, you can use the "
"``IMasterSlave`` trait. Then you have to implement the function ``def "
"asMaster(): Unit`` to set the direction of each element from the master's"
" perspective. Then you can use the ``master(MyBundle())`` and "
"``slave(MyBundle())`` syntax in the IO definition."
msgstr ""
"如果您的接口遵循主/从拓扑，您可以使用“IMasterSlave”特征。然后你必须实现函数“def "
"asMaster():Unit”从master的角度设置每个元素的方向。然后你可以在 IO 定义中使用 "
"``master(MyBundle())`` 和 ``slave(MyBundle())`` 语法。"

#: ../../SpinalHDL/Data types/bundle.rst:185
msgid ""
"There are functions defined as toXXX, such as the ``toStream`` method of "
"the ``Flow`` class. These functions can usually be called by the master "
"side. In addition, the fromXXX functions are designed for the slave side."
" It is common that there are more functions available for the master side"
" than for the slave side."
msgstr ""
"有些函数定义为 toXXX，例如 ``Flow`` 类的 ``toStream`` "
"方法。这些函数通常可以由master端调用。另外，fromXXX函数是为slave侧设计的。通常，主端可用的功能多于从端可用的功能。"

