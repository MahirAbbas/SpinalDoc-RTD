msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-"
"01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME "
"<EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-"
"Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESSPOT-Creation-Date:2023-12-02 00:23+0800PO-"
"Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS"
">Language-Team:LANGUAGE <LL@li.org>MIME-Version:1.0Content-Type:text/plain; "
"charset=UTF-8\n"
"PO-Revision-Date: 2023-12-15 15:56+0000\n"
"Last-Translator: Readon <xydarcher@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"spinaldoc-rtd/spinalhdlsimulationclock/zh_Hans/>\n"
"Language: zh_CN\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bitGenerated-By:Babel 2.13.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.3\n"

#: ../../SpinalHDL/Simulation/clock.rst:2
msgid "Clock domains"
msgstr "时钟域"

#: ../../SpinalHDL/Simulation/clock.rst:5
msgid "Stimulus API"
msgstr "刺激API"

#: ../../SpinalHDL/Simulation/clock.rst:7
msgid "Below is a list of ``ClockDomain`` stimulation functions:"
msgstr "以下是“ClockDomain”刺激函数的列表："

#: ../../SpinalHDL/Simulation/clock.rst:13
msgid "ClockDomain stimulus functions"
msgstr "ClockDomain 激励函数"

#: ../../SpinalHDL/Simulation/clock.rst:14
#: ../../SpinalHDL/Simulation/clock.rst:48
#: ../../SpinalHDL/Simulation/clock.rst:84
msgid "Description"
msgstr "描述"

#: ../../SpinalHDL/Simulation/clock.rst:15
msgid "``forkStimulus(period)``"
msgstr "``forkStimulus(句点)``"

#: ../../SpinalHDL/Simulation/clock.rst:16
#, fuzzy
msgid ""
"Fork a simulation process to generate the ClockDomain stimulus (clock, "
"reset, softReset, clockEnable signals)"
msgstr "分叉一个仿真过程以生成 ClockDomain 激励（时钟、复位、softReset、clockEnable 信号）"

#: ../../SpinalHDL/Simulation/clock.rst:17
msgid "``forkSimSpeedPrinter(printPeriod)``"
msgstr "``forkSimSpeedPrinter（printPeriod）``"

#: ../../SpinalHDL/Simulation/clock.rst:18
msgid ""
"Fork a simulation process which will periodically print the simulation speed"
" in kilo-cycles per real time second. ``printPeriod`` is in realtime seconds"
msgstr "分叉一个模拟过程，该过程将定期打印每秒实时千周期的模拟速度。 ``printPeriod`` 是实时秒数"

#: ../../SpinalHDL/Simulation/clock.rst:19
msgid "``clockToggle()``"
msgstr "``时钟切换（）``"

#: ../../SpinalHDL/Simulation/clock.rst:20
msgid "Toggle the clock signal"
msgstr "切换时钟信号"

#: ../../SpinalHDL/Simulation/clock.rst:21
msgid "``fallingEdge()``"
msgstr "``fallingEdge()``"

#: ../../SpinalHDL/Simulation/clock.rst:22
msgid "Clear the clock signal"
msgstr "清除时钟信号"

#: ../../SpinalHDL/Simulation/clock.rst:23
msgid "``risingEdge()``"
msgstr "``上升边缘（）``"

#: ../../SpinalHDL/Simulation/clock.rst:24
msgid "Set the clock signal"
msgstr "设置时钟信号"

#: ../../SpinalHDL/Simulation/clock.rst:25
msgid "``assertReset()``"
msgstr "``断言重置（）``"

#: ../../SpinalHDL/Simulation/clock.rst:26
msgid "Set the reset signal to its active level"
msgstr "将复位信号设置为有效电平"

#: ../../SpinalHDL/Simulation/clock.rst:27
msgid "``deassertReset()``"
msgstr "``deassertReset()``"

#: ../../SpinalHDL/Simulation/clock.rst:28
msgid "Set the reset signal to its inactive level"
msgstr "将复位信号设置为无效电平"

#: ../../SpinalHDL/Simulation/clock.rst:29
msgid "``assertClockEnable()``"
msgstr "``assertClockEnable()``"

#: ../../SpinalHDL/Simulation/clock.rst:30
#: ../../SpinalHDL/Simulation/clock.rst:32
msgid "Set the clockEnable signal to its active level"
msgstr "将时钟启用信号设置为有效电平"

#: ../../SpinalHDL/Simulation/clock.rst:31
msgid "``deassertClockEnable()``"
msgstr "``deassertClockEnable()``"

#: ../../SpinalHDL/Simulation/clock.rst:33
msgid "``assertSoftReset()``"
msgstr "``assertSoftReset()``"

#: ../../SpinalHDL/Simulation/clock.rst:34
#: ../../SpinalHDL/Simulation/clock.rst:36
msgid "Set the softReset signal to its active level"
msgstr "将软复位信号设置为有效电平"

#: ../../SpinalHDL/Simulation/clock.rst:35
msgid "``deassertSoftReset()``"
msgstr "``deassertSoftReset()``"

#: ../../SpinalHDL/Simulation/clock.rst:39
msgid "Wait API"
msgstr "等待API"

#: ../../SpinalHDL/Simulation/clock.rst:41
#: ../../SpinalHDL/Simulation/clock.rst:77
msgid ""
"Below is a list of ``ClockDomain`` utilities that you can use to wait for a "
"given event from the domain:"
msgstr "以下是“ClockDomain”实用程序的列表，您可以使用它们来等待来自域的给定事件："

#: ../../SpinalHDL/Simulation/clock.rst:47
msgid "ClockDomain wait functions"
msgstr "ClockDomain等待函数"

#: ../../SpinalHDL/Simulation/clock.rst:49
msgid "``waitSampling([cyclesCount])``"
msgstr "``waitSampling([cyclesCount])``"

#: ../../SpinalHDL/Simulation/clock.rst:50
msgid ""
"Wait until the ``ClockDomain`` makes a sampling, (active clock edge && "
"deassertReset && assertClockEnable)"
msgstr "等待“ClockDomain”进行采样（有效时钟沿 && deassertReset && assertClockEnable）"

#: ../../SpinalHDL/Simulation/clock.rst:51
msgid "``waitRisingEdge([cyclesCount])``"
msgstr "``waitRisingEdge([cyclesCount])``"

#: ../../SpinalHDL/Simulation/clock.rst:52
msgid ""
"Wait cyclesCount rising edges on the clock; cycleCount defaults to 1 cycle "
"if not otherwise specified. Note, cyclesCount = 0 is legal, and the function"
" is not sensitive to reset/softReset/clockEnable"
msgstr ""
"等待周期计数时钟的上升沿；如果没有另外指定，cycleCount 默认为 1 个周期。注意，cyclesCount = 0 "
"是合法的，该功能对复位/softReset/clockEnable 不敏感"

#: ../../SpinalHDL/Simulation/clock.rst:53
msgid "``waitFallingEdge([cyclesCount])``"
msgstr "``waitFallingEdge([cyclesCount])``"

#: ../../SpinalHDL/Simulation/clock.rst:54
msgid "Same as ``waitRisingEdge`` but for the falling edge"
msgstr "与“waitRisingEdge”相同，但针对下降沿"

#: ../../SpinalHDL/Simulation/clock.rst:55
msgid "``waitActiveEdge([cyclesCount])``"
msgstr "``waitActiveEdge([cyclesCount])``"

#: ../../SpinalHDL/Simulation/clock.rst:56
msgid ""
"Same as ``waitRisingEdge`` but for the edge level specified by the "
"``ClockDomainConfig``"
msgstr "与“waitRisingEdge”相同，但针对“ClockDomainConfig”指定的边沿级别"

#: ../../SpinalHDL/Simulation/clock.rst:57
msgid "``waitRisingEdgeWhere(condition)``"
msgstr "``waitRisingEdgeWhere（条件）``"

#: ../../SpinalHDL/Simulation/clock.rst:58
msgid ""
"Same as ``waitRisingEdge``, but to exit, the boolean ``condition`` must be "
"true when the rising edge occurs"
msgstr "与“waitRisingEdge”相同，但要退出，上升沿发生时布尔“condition”必须为真"

#: ../../SpinalHDL/Simulation/clock.rst:59
msgid "``waitFallingEdgeWhere(condition)``"
msgstr "``waitFallingEdgeWhere（条件）``"

#: ../../SpinalHDL/Simulation/clock.rst:60
msgid "Same as ``waitRisingEdgeWhere``, but for the falling edge"
msgstr "与“waitRisingEdgeWhere”相同，但针对下降沿"

#: ../../SpinalHDL/Simulation/clock.rst:61
msgid "``waitActiveEdgeWhere(condition)``"
msgstr "``waitActiveEdgeWhere（条件）``"

#: ../../SpinalHDL/Simulation/clock.rst:62
msgid ""
"Same as ``waitRisingEdgeWhere``, but for the edge level specified by the "
"``ClockDomainConfig``"
msgstr "与“waitRisingEdgeWhere”相同，但针对“ClockDomainConfig”指定的边缘级别"

#: ../../SpinalHDL/Simulation/clock.rst:63
msgid "``waitSamplingWhere(condition) : Boolean``"
msgstr "``waitSamplingWhere（条件）：布尔值``"

#: ../../SpinalHDL/Simulation/clock.rst:64
msgid "Wait until a clockdomain sampled and the given condition is true"
msgstr "等到时钟域采样并且给定条件为真"

#: ../../SpinalHDL/Simulation/clock.rst:65
msgid "``waitSamplingWhere(timeout)(condition) : Boolean``"
msgstr "``waitSamplingWhere（超时）（条件）：布尔值``"

#: ../../SpinalHDL/Simulation/clock.rst:66
msgid ""
"Same as waitSamplingWhere defined above, but will never block more than "
"timeout cycles. Return true if the exit condition came from the timeout"
msgstr "与上面定义的 waitSamplingWhere 相同，但阻塞永远不会超过超时周期。如果退出条件来自超时，则返回 true"

#: ../../SpinalHDL/Simulation/clock.rst:70
#, fuzzy
msgid ""
"All the functionality of the wait API can only be called directly from "
"inside a thread, and not from a callback executed via the Callback API."
msgstr "等待 API 的所有功能只能直接从线程内部调用，而不能从通过回调 API 执行的回调中调用。"

#: ../../SpinalHDL/Simulation/clock.rst:75
msgid "Callback API"
msgstr "回调接口"

#: ../../SpinalHDL/Simulation/clock.rst:83
msgid "ClockDomain callback functions"
msgstr "时钟域回调函数"

#: ../../SpinalHDL/Simulation/clock.rst:85
msgid "``onNextSampling { callback }``"
msgstr "``onNextSampling {回调}``"

#: ../../SpinalHDL/Simulation/clock.rst:86
msgid ""
"Execute the callback code only once on the next ``ClockDomain`` sample "
"(active edge + reset off + clock enable on)"
msgstr "仅在下一个“ClockDomain”样本上执行一次回调代码（有效边沿+复位关闭+时钟使能打开）"

#: ../../SpinalHDL/Simulation/clock.rst:87
msgid "``onSamplings { callback }``"
msgstr "``onSamplings {回调}``"

#: ../../SpinalHDL/Simulation/clock.rst:88
msgid ""
"Execute the callback code each time the ``ClockDomain`` sample (active edge "
"+ reset off + clock enable on)"
msgstr "每次“ClockDomain”采样时执行回调代码（有效边沿+复位关闭+时钟使能打开）"

#: ../../SpinalHDL/Simulation/clock.rst:89
msgid "``onActiveEdges { callback }``"
msgstr "``onActiveEdges {回调}``"

#: ../../SpinalHDL/Simulation/clock.rst:90
msgid ""
"Execute the callback code each time the ``ClockDomain`` clock generates its "
"configured edge"
msgstr "每次“ClockDomain”时钟生成其配置的边沿时执行回调代码"

#: ../../SpinalHDL/Simulation/clock.rst:91
msgid "``onEdges { callback }``"
msgstr "``onEdges {回调}``"

#: ../../SpinalHDL/Simulation/clock.rst:92
msgid ""
"Execute the callback code each time the ``ClockDomain`` clock generates a "
"rising or falling edge"
msgstr "每次“ClockDomain”时钟产生上升沿或下降沿时执行回调代码"

#: ../../SpinalHDL/Simulation/clock.rst:93
msgid "``onRisingEdges { callback }``"
msgstr "``onRisingEdges {回调}``"

#: ../../SpinalHDL/Simulation/clock.rst:94
msgid ""
"Execute the callback code each time the ``ClockDomain`` clock generates a "
"rising edge"
msgstr "每次“ClockDomain”时钟产生上升沿时执行回调代码"

#: ../../SpinalHDL/Simulation/clock.rst:95
msgid "``onFallingEdges { callback }``"
msgstr "``onFallingEdges {回调}``"

#: ../../SpinalHDL/Simulation/clock.rst:96
msgid ""
"Execute the callback code each time the ``ClockDomain`` clock generates a "
"falling edge"
msgstr "每次“ClockDomain”时钟产生下降沿时执行回调代码"

#: ../../SpinalHDL/Simulation/clock.rst:97
msgid "``onSamplingWhile { callback : Boolean }``"
msgstr "``onSamplingWhile {回调：布尔值}``"

#: ../../SpinalHDL/Simulation/clock.rst:98
msgid ""
"Same as onSampling, but you can stop it (forever) by letting the callback "
"returning false"
msgstr "与 onSampling 相同，但您可以通过让回调返回 false 来停止它（永远）"

#: ../../SpinalHDL/Simulation/clock.rst:103
msgid "Default ClockDomain"
msgstr "默认时钟域"

#: ../../SpinalHDL/Simulation/clock.rst:105
msgid ""
"You can access the default ``ClockDomain`` of your toplevel as shown below:"
msgstr "您可以访问顶层的默认“ClockDomain”，如下所示："

#: ../../SpinalHDL/Simulation/clock.rst:121
msgid "Note that you can also directly fork a standard reset/clock process:"
msgstr "请注意，您还可以直接分叉标准重置/时钟进程："

#: ../../SpinalHDL/Simulation/clock.rst:127
msgid "An example of how to wait for a rising edge on the clock:"
msgstr "如何等待时钟上升沿的示例："

#: ../../SpinalHDL/Simulation/clock.rst:135
msgid "New ClockDomain"
msgstr "新时钟域"

#: ../../SpinalHDL/Simulation/clock.rst:137
msgid ""
"If your toplevel defines some clock and reset inputs which aren't directly "
"integrated into their ``ClockDomain``, you can define their corresponding "
"``ClockDomain`` directly in the testbench:"
msgstr ""
"如果您的顶层定义了一些未直接集成到其“ClockDomain”中的时钟和重置输入，您可以直接在测试台中定义其相应的“ClockDomain”："
