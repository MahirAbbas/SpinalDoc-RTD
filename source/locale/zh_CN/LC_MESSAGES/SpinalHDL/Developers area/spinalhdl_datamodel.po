
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-"
"Date:2023-12-01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-"
"Translator:FULL NAME <EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN "
"<LL@li.org>Plural-Forms:nplurals=1; plural=0;MIME-Version:1.0Content-"
"Type:text/plain; charset=UTF-8\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2023-12-02 00:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:3
msgid "SpinalHDL internal datamodel"
msgstr "SpinalHDL 内部数据模型"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:10
msgid "Introduction"
msgstr "介绍"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:12
#, fuzzy
msgid ""
"This page provides documentation on the internal data structure utilized "
"by SpinalHDL for storing and modifying the netlist described by users via"
" the SpinalHDL API."
msgstr "该页面记录了 SpinalHDL 用户的内部数据结构，用于存储和修改用户通过 SpinalHDL API 描述的网表。"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:15
msgid "General structure"
msgstr "总体结构"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:17
msgid "The following diagrams follow the UML nomenclature :"
msgstr "下图遵循 UML 命名法："

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:19
msgid "A link with a white arrow mean \"base extend target\""
msgstr "带有白色箭头的链接表示“基本扩展目标”"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:20
msgid "A link with a black diamond mean \"base contains target\""
msgstr "带有黑色菱形的链接表示“基础包含目标”"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:21
msgid "A link with a white diamond mean \"base has a reference to target\""
msgstr "带有白色菱形的链接意味着“基地有对目标的引用”"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:22
#, fuzzy
msgid "The * symbol mean \"multiple\""
msgstr "* 符号表示“多个”"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:24
#, fuzzy
msgid ""
"The majority of the data structures are stored using double-linked lists,"
" which facilitate the insertion and removal of elements."
msgstr "大多数数据结构都是通过一些双链表存储的，以方便元素的插入和删除。"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:26
msgid "There is a diagram of the global data structure :"
msgstr "全局数据结构图如下："

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:31
#, fuzzy
msgid "And here more details about the `Statement` class :"
msgstr "这里有关于 Statement 类的更多详细信息："

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:36
#, fuzzy
msgid ""
"In general, when an element within the data model utilizes other "
"expressions or statements, that element typically includes functions for "
"iterating over these usages. For example, each Expression is equipped "
"with a *foreachExpression* function."
msgstr "因此，一般来说，如果数据模型的元素使用其他一些表达式或语句，则该元素将具有一些函数来迭代这些用法。例如，每个表达式都有一个“foreachExpression”函数。"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:38
#, fuzzy
msgid ""
"When using these iteration functions, you have the option to remove the "
"current element from the tree."
msgstr "当使用这些迭代函数时，您可以删除树的当前元素。"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:40
#, fuzzy
msgid ""
"Additionally, as a side note, while the *foreachXXX* functions iterate "
"only one level deep, there are often corresponding *walkXXX* functions "
"that perform recursive iteration. For instance, using "
"*myExpression.walkExpression* on *((a+b)+c)+d* will traverse the entire "
"tree of addition operations."
msgstr ""
"除了“仅”迭代一层深度的 foreachXXX 之外，通常还有一个 walkXXX 会递归迭代。因此，例如 ((a+b)+c)+d 上的 "
"myExpression.walkExpression 将遍历整个加法器树。"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:42
#, fuzzy
msgid ""
"There are also utilities like *myExpression.remapExpressions(Expression "
"=> Expression),* which iterate through all the expressions used within "
"*myExpression* and replace them with the one you provide."
msgstr ""
"还有 myExpression.remapExpressions(Expression => Expression) 等实用程序，它将迭代 "
"myExpression 的所有使用的表达式，并将其更改为返回的表达式。"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:44
msgid ""
"More generaly, most of the graph checks and transformations done by "
"SpinalHDL are located in "
"<https://github.com/SpinalHDL/SpinalHDL/blob/dev/core/src/main/scala/spinal/core/internals/Phase.scala>"
msgstr ""
"更一般地说，SpinalHDL 完成的大多数图形检查和转换都位于 "
"<https://github.com/SpinalHDL/SpinalHDL/blob/dev/core/src/main/scala/spinal/core/internals/Phase.scala"
" >"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:47
msgid "Exploring the datamodel"
msgstr "探索数据模型"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:49
#, fuzzy
msgid ""
"Here is an example that identifies all adders within the netlist without "
"utilizing shortcuts. :"
msgstr "这是一个不使用“快捷方式”查找网表的所有加法器的示例："

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:109
msgid "Which will produces :"
msgstr "这将产生："

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:127
#, fuzzy
msgid ""
"Please note that in many cases, shortcuts are available. All the "
"recursive processes mentioned earlier could have been replaced by a "
"single one. :"
msgstr "请注意，在很多情况下，都有捷径。上面的所有递归内容都可以用一个替换："

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:141
msgid "Compilation Phases"
msgstr "编译阶段"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:143
#, fuzzy
msgid ""
"Here is the complete list of default phases, arranged in order, that are "
"employed to modify, check, and generate Verilog code from a top-level "
"component. :"
msgstr "以下是用于从顶级组件修改/检查/生成 verilog 的所有默认阶段（按顺序）："

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:145
msgid "<https://github.com/SpinalHDL/SpinalHDL/blob/ec8cd9f513566b43cbbdb08d0df4dee1f0fee655/core/src/main/scala/spinal/core/internals/Phase.scala#L2487>"
msgstr "<https://github.com/SpinalHDL/SpinalHDL/blob/ec8cd9f513566b43cbbdb08d0df4dee1f0fee655/core/src/main/scala/spinal/core/internals/Phase.scala#L2487>"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:147
#, fuzzy
msgid ""
"If you, as a user, add a new compilation phase by using "
"*SpinalConfig.addTransformationPhase(new MyPhase())*, this phase will be "
"inserted immediately after the user component elaboration process, which "
"is relatively early in the compilation sequence. During this phase, you "
"can still make use of the complete SpinalHDL user API to introduce "
"elements into the netlist."
msgstr ""
"如果您使用 SpinalConfig.addTransformationPhase(new MyPhase()) "
"添加一个新的编译阶段，那么该阶段将在用户组件细化之后直接添加（所以很早）。那时，您仍然可以使用整个 SpinalHDL 用户 API "
"将元素添加到网表中。"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:149
#, fuzzy
msgid ""
"If you choose to use the SpinalConfig.phasesInserters API, it's essential"
" to exercise caution and ensure that any modifications made to the "
"netlist align with the phases that have already been executed. For "
"instance, if you insert your phase after the *PhaseInferWidth*, you must "
"specify the width of each node you introduce."
msgstr ""
"如果您使用 SpinalConfig.phasesInserters "
"api，那么您必须小心，仅以与已执行的阶段兼容的方式修改网表。例如，如果您在“PhaseInferWidth”之后插入阶段，则必须指定插入的每个节点的宽度。"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:152
msgid "Modifying a netlist as a user without plugins"
msgstr "在不使用插件的情况下以用户身份修改网表"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:154
#, fuzzy
msgid ""
"There are several user APIs that enable you to make modifications during "
"the user elaboration phase. :"
msgstr "有相当多的用户 API 允许在用户阐述期间修改内容："

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:156
msgid ""
"mySignal.removeAssignments : Will remove all previous `:=` affecting the "
"given signal"
msgstr "mySignal.removeAssignments ：将删除所有先前影响给定信号的 `:=`"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:157
msgid "mySignal.removeStatement : Will void the existance of the signal"
msgstr "mySignal.remove 语句：将使信号的存在无效"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:158
msgid ""
"mySignal.setAsDirectionLess : Will turn a in / out signal into a internal"
" signal"
msgstr "mySignal.setAsDirectionLess ：将输入/输出信号转换为内部信号"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:159
msgid ""
"mySignal.setName : Enforce a given name on a signal (there is many other "
"variants)"
msgstr "mySignal.setName ：在信号上强制指定名称（还有许多其他变体）"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:160
msgid ""
"mySubComponent.mySignal.pull() : Will provide a readable copy of the "
"given signal, even if that signal is somewhere else in the hierarchy"
msgstr "mySubComponent.mySignal.pull() ：将提供给定信号的可读副本，即使该信号位于层次结构中的其他位置"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:161
msgid ""
"myComponent.rework\\{ myCode \\} : Execute `myCode` in the context of "
"`myComponent`, allowing modifying it with the user API"
msgstr ""
"myComponent.rework\\{ myCode \\} ：在 `myComponent` 上下文中执行 `myCode`，允许使用用户 "
"API 修改它"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:163
#, fuzzy
msgid ""
"For example, the following code can be used to modify a top-level "
"component by adding a three-stage shift register to each input and output"
" of the component. This is particularly useful for synthesis testing."
msgstr "例如，以下代码将重新设计顶层组件，在组件的每个输入/输出上插入一个 3 级移位寄存器。 （对于合成测试有用）"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:187
#, fuzzy
msgid "You can use the code in the following manner: :"
msgstr "可以通过以下方式使用："

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:193
#, fuzzy
msgid ""
"Here is a function that enables you to execute the body code as if the "
"current component's context did not exist. This can be particularly "
"useful for defining new signals without the influence of the current "
"conditional scope (such as when or switch)."
msgstr "这是一个函数，它允许执行“body”代码，就好像当前组件中不存在任何东西一样。例如，这可以用于定义当前条件范围的新信号（当/切换）"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:223
#, fuzzy
msgid ""
"This kind of functionality is, for instance, employed in the VexRiscv "
"pipeline to dynamically create components or elements as needed."
msgstr "例如，这种功能在 VexRiscv 管道中用于动态创建事物。"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:226
msgid "User space netlist analysis"
msgstr "用户空间网表分析"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:228
#, fuzzy
msgid ""
"The SpinalHDL data model is also accessible and can be read during user-"
"time elaboration. Here's an example that can help find the shortest "
"logical path (in terms of clock cycles) to traverse a list of signals. In"
" this specific case, it is being used to analyze the latency of the "
"VexRiscv FPU design."
msgstr ""
"SpinalHDL "
"数据模型在用户时阐述期间也是可读的。这是一个示例，它将找到穿过信号列表的最短逻辑路径（以时钟周期为单位）。在给定的情况下，它是分析VexRiscv"
" FPU设计的延迟。"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:242
msgid ""
"Here you can find the implementation of that LatencyAnalysis tool : "
"<https://github.com/SpinalHDL/SpinalHDL/blob/3b87c898cb94dc08456b4fe2b1e8b145e6c86f63/lib/src/main/scala/spinal/lib/Utils.scala#L620>"
msgstr ""
"在这里您可以找到该 LatencyAnalysis "
"工具的实现：<https://github.com/SpinalHDL/SpinalHDL/blob/3b87c898cb94dc08456b4fe2b1e8b145e6c86f63/lib/src/main/scala/spinal/lib/Utils.scala#L620>"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:247
#, fuzzy
msgid "Enumerating every ClockDomain in use"
msgstr "枚举每个使用的 ClockDomain"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:249
#, fuzzy
msgid ""
"In this case, this is accomplished after the elaboration process by "
"utilizing the SpinalHDL report."
msgstr "所以这里是在使用 SpinalHDL 报告进行阐述之后完成的。"

#: ../../SpinalHDL/Developers area/spinalhdl_datamodel.rst:285
msgid "Will print out"
msgstr "会打印出来"

