# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/Libraries/fiber.rst:7
msgid "Fiber framework"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:9
msgid "Currently in developpement."
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:11
msgid "The Fiber to run the hardware elaboration in a out of order manner, a bit similarly to Makefile, where you can define rules and dependencies which will then be solved when you run a make command. It is very similar to the Scala Future feature."
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:13
msgid "Such framework complexify simple things but provide some strong feature for complex cases :"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:15
msgid "You can define things before even knowing all their requirements, ex : instanciating a interruption controller, before knowing how many lines of interrupt you need"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:16
msgid "Abstract/lazy/partial SoC architecture definition allowing the creation of SoC template for further specialisations"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:17
msgid "Automatic requirements negotiation between multiple agents in a decentralized way, ex : between masters and slaves of a memory bus"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:19
msgid "The framework is mainly composed of :"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:21
msgid "Handle[T], which can be used later to store a value of type T."
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:22
msgid "handle.load which allow to set the value of a handle (will reschedule all tasks waiting on it)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:23
msgid "handle.get, which return the value of the given handle. Will block the task execution if that handle isn't loaded yet"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:24
msgid "Handle{ code }, which fork a new task which will execute the given code. The result of that code will be loaded into the Handle"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:25
msgid "soon(handle), which allow the current task to announce that soon it will load that handle with a value (used to track which handle will"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:28
msgid "Warning, this is realy not usual RTL description and aim large system generation. It is currently used as toplevel integration tool in SaxonSoC."
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:31
msgid "Simple dummy example"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:33
msgid "There is a simple example :"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:56
msgid "Its runtime will be :"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:58
msgid "create a and b"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:59
msgid "fork the calculator task, but is blocked when executing a.get"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:60
msgid "fork the printer task, but is blocked when executing calculator.get"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:61
msgid "load a and b, which reschedule the calculator task (as it was waiting on a)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:62
msgid "calculator do its a + b sum, and load its Handle with that result, which reschedule the printer task"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:63
msgid "printer task print its stuff"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:64
msgid "everything done"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:67
msgid "So, the main point of that example is to show that we kind of overcome the sequential execution of things, as a and b are loaded after the definition of the calculator."
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:71
msgid "Handle[T]"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:73
msgid "Handle[T] are a bit like scala's Future[T], they allow to talk about something before it is even existing, and wait on it."
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:84
msgid "soon(handle)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/fiber.rst:86
msgid "In order to maintain a proper graph of dependencies between tasks and Handle, a task can specify in advance that it will load a given handle. This is very usefull in case of a generation starvation/deadlock for SpinalHDL to report accuratly where is the issue."
msgstr ""
