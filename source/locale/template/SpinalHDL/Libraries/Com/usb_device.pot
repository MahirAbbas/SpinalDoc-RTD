# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:3
msgid "USB device"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:6
msgid "Introduction"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:8
msgid "There is a USB device controller in the SpinalHDL library. In a few bullet points it can be resumed to :"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:10
msgid "Implemented to allow a CPU to configure and manage the endpoints"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:11
msgid "A internal ram which store the endpoints states and transactions descriptors"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:12
msgid "Up to 16 endpoints (for virtualy no price)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:13
msgid "Support USB host full speed (12Mbps)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:14
msgid "Test on linux using its own driver (https://github.com/SpinalHDL/linux/blob/dev/drivers/usb/gadget/udc/spinal_udc.c)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:15
msgid "Bmb memory interace for the configuration"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:16
msgid "Require a clock for the internal phy which is a multiple of 12 Mhz at least 48 Mhz"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:17
msgid "The controller frequency is not restricted"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:18
msgid "No external phy required"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:20
msgid "Linux gadget tested and functional :"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:22
msgid "Serial connection"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:23
msgid "Ethernet connection"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:24
msgid "Mass storage (~8 Mbps on ArtyA7 linux)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:26
msgid "Deployments :"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:28
msgid "https://github.com/SpinalHDL/SaxonSoc/tree/dev-0.3/bsp/digilent/ArtyA7SmpLinux"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:29
msgid "https://github.com/SpinalHDL/SaxonSoc/tree/dev-0.3/bsp/radiona/ulx3s/smp"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:33
msgid "Architecture"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:35
msgid "The controller is composed of :"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:37
msgid "A few control registers"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:38
msgid "A internal ram used to store the endpoint status, the transfer descriptors and the endpoint 0 SETUP data."
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:40
msgid "A linked list of descriptors for each endpoint in order to handle of the USB IN/OUT transactions and data."
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:42
msgid "The endpoint 0 manage the IN/OUT transactions like all the other endpoints but has some additional hardware to manage the SETUP transactions :"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:44
msgid "Its linked list is cleared on each setup transactions"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:45
msgid "The data of the SETUP transaction are stored in a fixed location (SETUP_DATA)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:46
msgid "It has a specific interrupt flag for SETUP transactions"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:49
msgid "Registers"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:51
msgid "Note that all registers and memories of the controller are only accessible in 32 bits word access, bytes access isn't supported."
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:54
msgid "FRAME (0xFF00)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:57
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:67
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:88
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:110
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:124
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:139
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:150
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:191
msgid "Name"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:57
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:67
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:88
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:110
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:124
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:139
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:150
msgid "Type"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:57
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:67
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:88
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:110
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:124
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:139
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:150
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:191
msgid "Bits"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:57
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:67
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:88
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:110
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:124
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:139
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:150
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:191
msgid "Description"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:59
msgid "usbFrameId"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:59
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:116
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:141
msgid "RO"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:59
msgid "31-0"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:59
msgid "Current usb frame id"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:64
msgid "ADDRESS (0xFF04)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:69
msgid "address"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:69
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:72
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:74
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:112
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:114
msgid "WO"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:69
msgid "6-0"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:69
msgid "The device will only listen at tokens with the specified address This field is automaticaly cleared on usb reset events"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:72
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:114
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:152
msgid "enable"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:72
msgid "8"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:72
msgid "Enable the USB address filtering if set"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:74
msgid "trigger"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:74
msgid "9"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:74
msgid "Set the enable (see above) on the next EP0 IN tocken completion Cleared by the hardware after any EP0 completion"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:78
msgid "The idea here is to keep the whole register cleared until a USB SET_ADDRESS setup packet is received on EP0. At that moment, you can set the address and the trigger field, then provide the IN zero length descriptor to EP0 to finalise the SET_ADDRESS sequance. The controller will then automaticaly turn on the address filtering at the completion of that descriptor."
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:83
msgid "INTERRUPT (0xFF08)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:85
msgid "All bits of this register can be cleared by writing '1' in them."
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:90
msgid "endpoints"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:90
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:92
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:94
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:96
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:98
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:100
msgid "RC"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:90
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:193
msgid "15-0"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:90
msgid "Raised when a enpoint generate a interrupt"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:92
msgid "reset"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:92
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:164
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:202
msgid "16"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:92
msgid "Raised when a USB reset appeared"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:94
msgid "ep0Setup"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:94
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:204
msgid "17"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:94
msgid "Raised when endpoint 0 receive a setup transaction"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:96
msgid "suspend"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:96
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:207
msgid "18"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:96
msgid "Raised when a USB suspend appeared"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:98
msgid "resume"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:98
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:212
msgid "19"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:98
msgid "Raised when a USB resume appeared"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:100
msgid "disconnect"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:100
msgid "20"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:100
msgid "Raised when a USB disconnect appeared"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:104
msgid "HALT (0xFF0C)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:106
msgid "This register allow to place a single enpoint in a dormant state in order to ensure atomicity of CPU operations, allowing to do things as read/modify/write on the endpoint registers and descriptors. The peripheral will return NAK if the given endpoint is addressed by the usb host."
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:112
msgid "endpointId"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:112
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:141
msgid "3-0"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:112
msgid "The endpoint you want to put in sleep"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:114
msgid "4"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:116
msgid "effective enable"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:116
msgid "5"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:116
msgid "After setting the enable, you need to wait for this bit to be set by the hardware itself to ensure atomicity"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:121
msgid "CONFIG (0xFF10)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:126
msgid "pullupSet"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:126
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:128
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:130
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:132
msgid "SO"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:126
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:152
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:193
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:195
msgid "0"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:126
msgid "Write '1' to enable the USB device pullup on the dp pin"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:128
msgid "pullupClear"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:128
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:154
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:197
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:200
msgid "1"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:130
msgid "interruptEnableSet"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:130
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:156
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:202
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:204
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:207
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:212
msgid "2"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:130
msgid "Write '1' to let the present and future interrupt happening"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:132
msgid "interruptEnableClear"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:132
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:158
msgid "3"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:136
msgid "INFO (0xFF20)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:141
msgid "ramSize"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:141
msgid "The internal ram will have (1 << this) bytes"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:145
msgid "ENDPOINTS (0x0000 - 0x003F)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:147
msgid "The endpoints status are stored at the begining of the internal ram over one 32 bits word each."
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:152
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:154
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:156
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:158
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:161
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:164
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:166
msgid "RW"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:152
msgid "If not set, the endpoint will ignore all the trafic"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:154
msgid "stall"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:154
msgid "If set, the endpoint will always return STALL status"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:156
msgid "nack"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:156
msgid "If set, the endpoint will always return NACK status"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:158
msgid "dataPhase"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:158
msgid "Specify the IN/OUT data PID used. '0' => DATA0. This field is also updated by the controller."
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:161
msgid "head"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:161
#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:197
msgid "15-4"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:161
msgid "Specify the current descriptor head (linked list). 0 => empty list, byte address = this << 4"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:164
msgid "isochronous"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:166
msgid "maxPacketSize"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:166
msgid "31-22"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:169
msgid "To get a endpoint responsive you need :"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:171
msgid "Set its enable flag to 1"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:173
msgid "Then the there is a few cases : - Either you have the stall or nack flag set, and so, the controller will always responde with the corresponding responses - Either, for EP0 setup request, the controller will not use descriptors, but will instead write the data into the SETUP_DATA register, and ACK - Either you have a empty linked list (head==0) in which case it will answer NACK - Either you have at least one descriptor pointed by head, in which case it will execute it and ACK if all was going smooth"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:180
msgid "SETUP_DATA (0x0040 - 0x0047)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:182
msgid "When endpoint 0 receive a SETUP transaction, the data of the transaction will be stored at that place."
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:185
msgid "Descriptors"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:187
msgid "Descriptors allows to specify how a endpoint need to handle the data phase of IN/OUT transactions. They are stored in the internal ram, can be linked together via their linked lists and need to be aligned on 16 bytes boundaries"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:191
msgid "Word"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:193
msgid "offset"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:193
msgid "Specify the current progress in the transfer (in byte)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:195
msgid "code"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:195
msgid "19-16"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:195
msgid "0xF => in progress, 0x0 => success"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:197
msgid "next"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:197
msgid "Point the the next descriptor 0 => nothing, byte address = this << 4"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:200
msgid "length"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:200
msgid "31-16"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:200
msgid "Number of bytes allocated for the data field"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:202
msgid "direction"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:202
msgid "'0' => OUT, '1' => IN"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:204
msgid "interrupt"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:204
msgid "If set, the completion of the descriptor will generate a interrupt."
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:207
msgid "completionOnFull"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:207
msgid "Normaly, a descriptor completion only occure when a USB transfer is smaller than the maxPacketSize. But if this field is set, then when the descriptor become full is also a considered as a completion event. (offset == length)"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:212
msgid "data1OnCompletion"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:212
msgid "force the endpoint dataPhase to DATA1 on the completion of the descriptoo"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:215
msgid "data"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:215
msgid "..."
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:218
msgid "Note, if the controller receive a frame where the IN/OUT does not match the descriptor IN/OUT, the frame will be ignored."
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:220
msgid "Also, to initialise a descriptor, the CPU should set the code field to 0xF"
msgstr ""

#: ../../source/SpinalHDL/Libraries/Com/usb_device.rst:223
msgid "Usage"
msgstr ""
