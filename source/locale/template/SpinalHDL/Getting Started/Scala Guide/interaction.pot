# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:3
msgid "Interaction"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:6
msgid "Introduction"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:8
msgid "SpinalHDL is, in fact, not an language: it's a regular Scala library. This could seem strange at first glance, but it is a very powerful combination."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:10
msgid "You can use the whole Scala world to help you in the description of your hardware via the SpinalHDL library, but to do that properly, it's important to understand how SpinalHDL interacts with Scala."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:13
msgid "How SpinalHDL works behind the API"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:15
msgid "When you execute your SpinalHDL hardware description, each time you use SpinalHDL functions, operators, or classes, it will build an in-memory graph that represents the netlist of your design."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:17
msgid "Then, when the elaboration is done (instantiation of your top-level ``Component`` classes), SpinalHDL will do some passes on the graph that was constructed, and if everything is fine, it will flush that graph into a VHDL or Verilog file."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:20
msgid "Everything is a reference"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:22
msgid "For example, if you define a Scala function which takes a parameter of type ``Bits``, when you call it, it will be passed as a reference. As consequence of that, if you assign that argument inside the function, it has the same effect on the underlying ``Bits`` object as if you had assigned to it outside the function."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:27
msgid "Hardware types"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:29
msgid "Hardware data types in SpinalHDL are the combination of two things:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:32
msgid "An instance of a given Scala type"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:33
msgid "The configuration of that instance"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:35
msgid "For example ``Bits(8 bits)`` is the combination of the Scala type ``Bits`` and its ``8 bits`` configuration (as a construction parameter)."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:38
msgid "RGB example"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:40
msgid "Let's take an Rgb bundle class as example:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:50
msgid "The hardware data type here is the combination of the Scala ``Rgb`` class and its ``rWidth``, ``gWidth``, and ``bWidth`` parameterization."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:52
msgid "Here is an example of usage:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:62
msgid "You can also use functions to define various kinds of type factories (typedef):"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:73
msgid "Names of signals in the generated RTL"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:75
msgid "To name signals in the generated RTL, SpinalHDL uses Java reflections to walk through your entire component hierarchy, collecting all references stored inside the class attributes, and naming them with their attribute name."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:77
msgid "This is why the names of every signal defined inside a function are lost:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:88
msgid "One solution if you want preserve the names of the internal variables in the generated RTL, is to use ``Area``:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:100
msgid "Scala is for elaboration, SpinalHDL for hardware description"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:102
msgid "For example, if you write a Scala for loop to generate some hardware, it will generate the unrolled result in VHDL/Verilog."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:104
msgid "Also, if you want a constant, you should not use SpinalHDL hardware literals but the Scala ones. For example:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:119
msgid "Scala elaboration capabilities (if, for, functional programming)"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:121
msgid "All of Scala's syntax can be used to elaborate hardware designs, for instance, a Scala ``if`` statement could be used to enable or disable the generation of hardware:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:133
msgid "The same is true for Scala ``for`` loops:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Scala Guide/interaction.rst:145
msgid "Also, functional programming techniques can be used with many SpinalHDL types:"
msgstr ""
