# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:5
msgid "VHDL equivalences"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:8
msgid "Entity and architecture"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:10
msgid "In SpinalHDL, a VHDL entity and architecture are both defined inside a ``Component``."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:12
msgid "Here is an example of a component which has 3 inputs (``a``, ``b``, ``c``) and an output (``result``). This component also has an ``offset`` construction parameter (like a VHDL generic)."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:24
msgid "Then to instantiate that component, you don't need to bind it:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:43
msgid "Data types"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:45
msgid "SpinalHDL data types are similar to the VHDL ones:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:50
#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:68
msgid "VHDL"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:51
#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:69
msgid "SpinalHDL"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:52
msgid "std_logic"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:53
msgid "Bool"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:54
msgid "std_logic_vector"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:55
msgid "Bits"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:56
msgid "unsigned"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:57
msgid "UInt"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:58
msgid "signed"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:59
msgid "SInt"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:62
msgid "In VHDL, to define an 8 bit ``unsigned`` you have to give the range of bits ``unsigned(7 downto 0)``,"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:63
msgid "whereas in SpinalHDL you simply supply the number of bits ``UInt(8 bits)``."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:70
msgid "records"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:71
msgid "Bundle"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:72
msgid "array"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:73
msgid "Vec"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:74
msgid "enum"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:75
msgid "SpinalEnum"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:77
msgid "Here is an example of the SpinalHDL ``Bundle`` definition. ``channelWidth`` is a construction parameter, like VHDL generics, but for data structures:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:85
msgid "Then for example, to instantiate a ``Bundle``, you need to write ``val myColor = RGB(channelWidth=8)``."
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:88
msgid "Signal"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:90
msgid "Here is an example about signal instantiations:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:107
msgid "Assignments"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:109
msgid "In SpinalHDL, the ``:=`` assignment operator is equivalent to the VHDL signal assignment (``<=``):"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:116
msgid "Conditional assignments are done like in VHDL by using ``if``/``case`` statements:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:141
msgid "Literals"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:143
msgid "Literals are a little bit different than in VHDL:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:163
msgid "Registers"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:165
msgid "In SpinalHDL, registers are explicitly specified while in VHDL registers are inferred. Here is an example of SpinalHDL registers:"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:175
msgid "Process blocks"
msgstr ""

#: ../../source/SpinalHDL/Getting Started/Help for VHDL people/vhdl_perspective.rst:177
msgid "Process blocks are a simulation feature that is unnecessary to design RTL. It's why SpinalHDL doesn't contain any feature analogous to process blocks, and you can assign what you want, where you want."
msgstr ""
