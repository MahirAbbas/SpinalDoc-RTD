# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/Simulation/signal.rst:2
msgid "Accessing signals of the simulation"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:5
msgid "Read and write signals"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:7
msgid "Each interface signal of the toplevel can be read and written from Scala:"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:13
msgid "Syntax"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:14
msgid "Description"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:15
msgid "``Bool.toBoolean``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:16
msgid "Read a hardware ``Bool`` as a Scala ``Boolean`` value"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:17
msgid "``Bits``/``UInt``/``SInt.toInt``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:18
msgid "Read a hardware ``BitVector`` as a Scala ``Int`` value"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:19
msgid "``Bits``/``UInt``/``SInt.toLong``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:20
msgid "Read a hardware ``BitVector`` as a Scala ``Long`` value"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:21
msgid "``Bits``/``UInt``/``SInt.toBigInt``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:22
msgid "Read a hardware ``BitVector`` as a Scala ``BigInt`` value"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:23
msgid "``SpinalEnumCraft.toEnum``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:24
msgid "Read a hardware ``SpinalEnumCraft`` as a Scala ``SpinalEnumElement`` value"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:25
msgid "``Bool #= Boolean``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:26
msgid "Assign a hardware ``Bool`` from an Scala ``Boolean``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:27
msgid "``Bits``/``UInt``/``SInt #= Int``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:28
msgid "Assign a hardware ``BitVector`` from a Scala ``Int``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:29
msgid "``Bits``/``UInt``/``SInt #= Long``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:30
msgid "Assign a hardware ``BitVector`` from a Scala ``Long``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:31
msgid "``Bits``/``UInt``/``SInt #= BigInt``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:32
msgid "Assign a hardware ``BitVector`` from a Scala ``BigInt``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:33
msgid "``SpinalEnumCraft #= SpinalEnumElement``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:34
msgid "Assign a hardware ``SpinalEnumCraft`` from a Scala ``SpinalEnumElement``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:35
msgid "``Data.randomize()``"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:36
msgid "Assign a random value to a SpinalHDL value."
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:48
msgid "Accessing signals inside the component's hierarchy"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:50
msgid "To access signals which are inside the component's hierarchy, you have first to set the given signal as ``simPublic``."
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:52
msgid "You can add this ``simPublic`` tag directly in the hardware description:"
msgstr ""

#: ../../source/SpinalHDL/Simulation/signal.rst:76
msgid "Or you can add it later, after having instantiated your toplevel for the simulation:"
msgstr ""
