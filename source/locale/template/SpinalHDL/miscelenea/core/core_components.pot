# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:8
msgid "The ``spinal.core`` components"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:9
msgid "The core components of the language are described in this document. It is part of the general"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:13
msgid "The core language components are as follows:"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:15
msgid ":ref:`*Clock domains* <core_components_clock_domain_definition>`, which allow to define and interoperate multiple clock domains within a design"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:16
msgid "*Memory instantiation*\\ , which permit the automatic instantiation of RAM and ROM memories."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:17
msgid "*IP instantiation*\\ , using either existing VHDL or Verilog component."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:18
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:160
msgid "Assignments"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:19
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:229
msgid "When / Switch"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:20
msgid "Component hierarchy"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:21
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:328
msgid "Area"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:22
msgid "Functions"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:23
msgid "Utility functions"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:24
msgid "VHDL generator"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:29
msgid "Clock domains definitions"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:31
msgid "In *Spinal*\\ , clock and reset signals can be combined to create a **clock domain**. Clock domains could be applied to some area of the design and then all synchronous elements instantiated into this area will then **implicitly** use this clock domain."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:33
msgid "Clock domain application work like a stack, which mean, if you are in a given clock domain, you can still apply another clock domain locally."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:39
msgid "Clock domain syntax"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:41
msgid "The syntax to define a clock domain is as follows (using EBNF syntax):"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:43
msgid "``ClockDomain(clock : Bool[,reset : Bool[,enable : Bool]]])``"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:45
msgid "This definition takes three parameters:"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:48
msgid "The clock signal that defines the domain"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:49
msgid "An optional ``reset``\\ signal. If a register which need a reset and his clock domain didn't provide one, an error message happen"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:50
msgid "An optional ``enable`` signal. The goal of this signal is to disable the clock on the whole clock domain without having to  manually implement that on each synchronous element."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:52
msgid "An applied example to define a specific clock domain within the design is as follows:"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:70
msgid "Clock configuration"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:72
msgid "In addition to the constructor parameters given :ref:`here <core_componets_clock_constructor>` , the following elements of each clock domain are configurable via a ``ClockDomainConfig`` class :"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:78
msgid "Property"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:79
msgid "Valid values"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:80
msgid "``clockEdge``"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:81
msgid "``RISING``\\ , ``FALLING``"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:82
msgid "``ResetKind``"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:83
msgid "``ASYNC``\\ , ``SYNC``"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:84
msgid "``resetActiveHigh``"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:85
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:87
msgid "``true``\\ , ``false``"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:86
msgid "``clockEnableActiveHigh``"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:112
msgid "By default, a ClockDomain is applied to the whole design. The configuration of this one is :"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:115
msgid "clock : rising edge"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:116
msgid "reset: asynchronous, active high"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:117
msgid "no enable signal"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:120
msgid "External clock"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:122
msgid "You can define everywhere a clock domain which is driven by the outside. It will then automatically add clock and reset wire from the top level inputs to all synchronous elements."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:140
msgid "Cross Clock Domain"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:142
msgid "SpinalHDL checks at compile time that there is no unwanted/unspecified cross clock domain signal reads. If you want to read a signal that is emitted by another ``ClockDomain`` area, you should add the ``crossClockDomain`` tag to the destination signal as depicted in the following example:"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:162
msgid "There are multiple assignment operator :"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:168
msgid "Symbole"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:169
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:204
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:307
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:455
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:467
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:521
msgid "Description"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:170
msgid ":="
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:0
msgid "Standard assignment, equivalent to '<=' in VHDL/Verilog"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:0
msgid "last assignment win, value updated at next delta cycle"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:173
msgid "/="
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:0
msgid "Equivalent to := in VHDL and = in Verilog"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:0
msgid "value updated instantly"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:176
msgid "<>"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:0
msgid "Automatic connection between 2 signals. Direction is inferred by using signal direction (in/out)"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:0
msgid "Similar behavioural than :="
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:197
msgid "SpinalHDL check that bitcount of left and right assignment side match. There is multiple ways to adapt bitcount of BitVector (Bits, UInt, SInt) :"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:203
msgid "Resizing ways"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:205
msgid "x := y.resized"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:206
msgid "Assign x wit a resized copy of y, resize value is automatically inferred to match x"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:207
msgid "x := y.resize(newWidth)"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:208
msgid "Assign x with a resized copy of y, size is manually calculated"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:211
msgid "There are 2 cases where spinal automaticly resize things :"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:217
msgid "Assignement"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:218
msgid "Problem"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:219
msgid "SpinalHDL action"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:220
msgid "myUIntOf_8bit := U(3)"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:221
msgid "U(3) create an UInt of 2 bits, which don't match with left side"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:222
msgid "Because  U(3) is a \"weak\" bit inferred signal, SpinalHDL resize it automatically"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:223
msgid "myUIntOf_8bit := U(2 -> False default -> true)"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:224
msgid "The right part infer a 3 bit UInt, which doesn't match with the left part"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:225
msgid "SpinalHDL reapply the default value to bit that are missing"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:231
msgid "As VHDL and Verilog, wire and register can be conditionally assigned by using when and switch syntaxes"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:255
msgid "You can also define new signals into a when/switch statement. It's useful if you want to calculate an intermediate value."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:272
msgid "Component/Hierarchy"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:274
msgid "Like in VHDL and Verilog, you can define components that could be used to build a design hierarchy.  But unlike them, you don't need to bind them at instantiation."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:300
msgid "Syntax to define in/out is the following :"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:306
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:454
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:466
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:520
msgid "Syntax"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:308
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:468
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:522
msgid "Return"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:309
msgid "in/out(x : Data)"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:310
msgid "Set x an input/output"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:311
msgid "x"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:312
msgid "in/out Bool()"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:313
msgid "Create an input/output Bool"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:314
msgid "Bool"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:315
msgid "in/out Bits/UInt/SInt(x bits)"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:316
msgid "Create an input/output of the corresponding type"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:317
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:471
#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:477
msgid "T"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:320
msgid "There is some rules about component interconnection :"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:323
msgid "Components can only read outputs/inputs signals of children components"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:324
msgid "Components can read outputs/inputs ports values"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:325
msgid "If for some reason, you need to read a signals from far away in the hierarchy (debug, temporal patch) you can do it by using the value returned by some.where.else.theSignal.pull()."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:330
msgid "Sometime, creating a component to define some logic is overkill and to much verbose. For this kind of cases you can use Area :"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:360
msgid "Function"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:362
msgid "The ways you can use Scala functions to generate hardware are radically different than VHDL/Verilog for many reasons:"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:365
msgid "You can instantiate register, combinatorial logic and component inside them."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:366
msgid "You don't have to play with ``process``\\ /\\ ``@always`` that limit the scope of assignment of signals"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:0
msgid "Everything work by reference, which allow many manipulation."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:0
msgid "For example you can give to a function an bus as argument, then the function can internaly read/write it."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:0
msgid "You can also return a Component, a Bus, are anything else from scala the scala world."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:372
msgid "RGB to gray"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:374
msgid "For example if you want to convert a Red/Green/Blue color into a gray one by using coefficient, you can use functions to apply them :"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:390
msgid "Valid Ready Payload bus"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:392
msgid "For instance if you define a simple Valid Ready Payload bus, you can then define usefull function inside it."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:417
msgid "VHDL generation"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:419
msgid "There is a small component and a ``main`` that generate the corresponding VHDL."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:448
msgid "Memory"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:456
msgid "Mem(type : Data,size : Int)"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:457
msgid "Create a RAM"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:458
msgid "Mem(type : Data,initialContent : Array[Data])"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:459
msgid "Create a ROM"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:469
msgid "mem(x)"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:470
msgid "Asynchronous read"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:472
msgid "mem(x) := y"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:473
msgid "Synchronous write"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:475
msgid "mem.readSync(address,enable)"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:476
msgid "Synchronous read"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:481
msgid "Instanciate VHDL and Verilog IP"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:483
msgid "In some cases, it could be usefull to instanciate a VHDL or a Verilog component into a SpinalHDL design. To do that, you need to define BlackBox which is like a Component, but its internal implementation should be provided by a separate VHDL/Verilog file to the simulator/synthesis tool."
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:512
msgid "Utils"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:514
msgid "The SpinalHDL core contain some utils :"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:523
msgid "log2Up(x : BigInt)"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:524
msgid "Return the number of bit needed to represent x states"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:525
msgid "Int"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:526
msgid "isPow2(x : BigInt)"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:527
msgid "Return true if x is a power of two"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:528
msgid "Boolean"
msgstr ""

#: ../../source/SpinalHDL/miscelenea/core/core_components.rst:531
msgid "Much more tool and utils are present in spinal.lib"
msgstr ""
