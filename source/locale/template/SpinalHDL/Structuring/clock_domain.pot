# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:4
msgid "Clock domains"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:7
msgid "Introduction"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:9
msgid "In SpinalHDL, clock and reset signals can be combined to create a **clock domain**. Clock domains can be applied to some areas of the design and then all synchronous elements instantiated into those areas will then **implicitly** use this clock domain."
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:11
msgid "Clock domain application works like a stack, which means that if you are in a given clock domain you can still apply another clock domain locally."
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:13
msgid "Please note that a register captures its clock domain when the register is created, not when it is assigned. So please make sure to create them inside the desired ``ClockingArea``."
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:18
msgid "Instantiation"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:20
msgid "The syntax to define a clock domain is as follows (using EBNF syntax):"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:33
msgid "This definition takes five parameters:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:39
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:194
msgid "Argument"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:40
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:195
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:330
msgid "Description"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:41
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:196
msgid "Default"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:42
msgid "``clock``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:43
msgid "Clock signal that defines the domain"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:45
msgid "``reset``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:46
msgid "Reset signal. If a register exists which needs a reset and the clock domain doesn't provide one, an error message will be displayed"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:47
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:50
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:53
msgid "null"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:48
msgid "``softReset``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:49
msgid "Reset which infers an additional synchronous reset"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:51
msgid "``clockEnable``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:52
msgid "The goal of this signal is to disable the clock on the whole clock domain without having to manually implement that on each synchronous element"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:54
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:212
msgid "``frequency``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:55
msgid "Allows you to specify the frequency of the given clock domain and later read it in your design"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:56
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:214
msgid "UnknownFrequency"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:57
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:200
msgid "``config``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:58
msgid "Specify the polarity of signals and the nature of the reset"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:59
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:202
msgid "Current config"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:62
msgid "An applied example to define a specific clock domain within the design is as follows:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:77
msgid "When an `Area` is not needed, it is also possible to apply the clock domain directly. Two syntaxes exist:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:103
msgid "Configuration"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:105
msgid "In addition to :ref:`constructor parameters <clock_domain_instantiation>`\\ , the following elements of each clock domain are configurable via a ``ClockDomainConfig``\\ class:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:111
msgid "Property"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:112
msgid "Valid values"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:113
msgid "``clockEdge``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:114
msgid "``RISING``\\ , ``FALLING``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:115
msgid "``resetKind``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:116
msgid "``ASYNC``\\ , ``SYNC``\\ , and ``BOOT`` which is supported by some FPGAs (where FF values are loaded by the bitstream)"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:117
msgid "``resetActiveLevel``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:118
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:120
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:122
msgid "``HIGH``\\ , ``LOW``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:119
msgid "``softResetActiveLevel``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:121
msgid "``clockEnableActiveLevel``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:155
msgid "By default, a ``ClockDomain`` is applied to the whole design. The configuration of this default domain is:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:158
msgid "Clock : rising edge"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:159
msgid "Reset : asynchronous, active high"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:160
msgid "No clock enable"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:162
msgid "This corresponds to the following ``ClockDomainConfig``:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:173
msgid "Internal clock"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:175
msgid "An alternative syntax to create a clock domain is the following:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:188
msgid "This definition takes six parameters:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:197
msgid "``name``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:198
msgid "Name of `clk` and `reset` signal"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:201
msgid "Specify polarity of signals and the nature of the reset"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:203
msgid "``withReset``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:204
msgid "Add a reset signal"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:205
msgid "true"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:206
msgid "``withSoftReset``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:207
msgid "Add a soft reset signal"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:208
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:211
msgid "false"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:209
msgid "``withClockEnable``"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:210
msgid "Add a clock enable"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:213
msgid "Frequency of the clock domain"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:217
msgid "The advantage of this approach is to create clock and reset signals with a known/specified name instead of an inherited one."
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:219
msgid "Once created, you have to assign the ``ClockDomain``'s signals, as shown in the example below:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:251
msgid "External clock"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:253
msgid "You can define a clock domain which is driven by the outside anywhere in your source. It will then automatically add clock and reset wires from the top level inputs to all synchronous elements."
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:266
msgid "The arguments to the ``ClockDomain.external`` function are exactly the same as in the ``ClockDomain.internal`` function. Below is an example of a design using ``ClockDomain.external``:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:288
msgid "Signal priorities in HDL generation"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:290
msgid "In the current version, reset and clock enable signals have different priorities. Their order is : ``asyncReset``, ``clockEnable``, ``syncReset`` and ``softReset``."
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:292
msgid "Please be careful that clockEnable has a higher priority than syncReset. If you do a sync reset when the clockEnable is disabled (especially at the beginning of a simulation), the gated registers will not be reseted."
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:294
msgid "Here is an example:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:302
msgid "It will generate VerilogHDL codes like:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:316
msgid "If that behaviour is problematic, one workaround is to use a when statement as a clock enable instead of using the ClockDomain.enable feature. This is open for future improvements."
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:319
msgid "Context"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:321
msgid "You can retrieve in which clock domain you are by calling ``ClockDomain.current`` anywhere."
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:323
msgid "The returned ``ClockDomain`` instance has the following functions that can be called:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:329
msgid "name"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:331
msgid "Return"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:332
msgid "frequency.getValue"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:333
msgid "Return the frequency of the clock domain"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:334
msgid "Double"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:335
msgid "hasReset"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:336
msgid "Return if the clock domain has a reset signal"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:337
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:340
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:343
msgid "Boolean"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:338
msgid "hasSoftReset"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:339
msgid "Return if the clock domain has a soft reset signal"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:341
msgid "hasClockEnable"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:342
msgid "Return if the clock domain has a clock enable signal"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:344
msgid "readClockWire"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:345
msgid "Return a signal derived from the clock signal"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:346
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:349
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:352
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:355
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:358
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:361
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:364
msgid "Bool"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:347
msgid "readResetWire"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:348
msgid "Return a signal derived from the soft reset signal"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:350
msgid "readSoftResetWire"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:351
msgid "Return a signal derived from the reset signal"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:353
msgid "readClockEnableWire"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:354
msgid "Return a signal derived from the clock enable signal"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:356
msgid "isResetActive"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:357
msgid "Return True when the reset is active"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:359
msgid "isSoftResetActive"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:360
msgid "Return True when the soft reset is active"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:362
msgid "isClockEnableActive"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:363
msgid "Return True when the clock enable is active"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:367
msgid "An example is included below where a UART controller uses the frequency specification to set its clock divider:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:379
msgid "Clock domain crossing"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:381
msgid "SpinalHDL checks at compile time that there are no unwanted/unspecified cross clock domain signal reads. If you want to read a signal that is emitted by another ``ClockDomain`` area, you should add the ``crossClockDomain`` tag to the destination signal as depicted in the following example:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:443
msgid "In general, you can use 2 or more flip-flop driven by the destination clock domain to prevent metastability. The ``BufferCC(input: T, init: T = null, bufferDepth: Int = 2)`` function provided in ``spinal.lib._`` will instantiate the necessary flip-flops (the number of flip-flops will depends on the ``bufferDepth`` parameter) to mitigate the phenomena."
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:467
msgid "The ``BufferCC`` function is only for signals of type ``Bit``, or ``Bits`` operating as Gray-coded counters (only 1 bit-flip per clock cycle), and can not used for multi-bit cross-domain processes. For multi-bit cases, it is recommended to use ``StreamFifoCC`` for high bandwidth requirements, or use ``StreamCCByToggle`` to reduce resource usage in cases where bandwidth is not critical."
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:470
msgid "Special clocking Areas"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:473
msgid "Slow Area"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:475
msgid "A ``SlowArea`` is used to create a new clock domain area which is slower than the current one:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:504
msgid "BootReset"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:506
msgid "`clockDomain.withBootReset()` could specify register's resetkinde as boot. `clockDomain.withSyncReset()` could specify register's resetkinde as Sync-reset."
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:524
msgid "ResetArea"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:526
msgid "A ``ResetArea`` is used to create a new clock domain area where a special reset signal is combined with the current clock domain reset:"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:546
msgid "ClockEnableArea"
msgstr ""

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:548
msgid "A ``ClockEnableArea`` is used to add an additional clock enable in the current clock domain:"
msgstr ""
