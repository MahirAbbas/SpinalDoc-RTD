# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/Other language features/utils.rst:7
msgid "Utils"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:10
msgid "General"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:12
msgid "Many tools and utilities are present in :ref:`spinal.lib <lib_introduction>` but some are already present in the SpinalHDL Core."
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:18
msgid "Syntax"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:19
msgid "Return"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:20
msgid "Description"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:21
msgid "``widthOf(x : BitVector)``"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:22
#: ../../source/SpinalHDL/Other language features/utils.rst:25
msgid "Int"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:23
msgid "Return the width of a Bits/UInt/SInt signal"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:24
msgid "``log2Up(x : BigInt)``"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:26
msgid "Return the number of bits needed to represent ``x`` states"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:27
msgid "``isPow2(x : BigInt)``"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:28
msgid "Boolean"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:29
msgid "Return true if ``x`` is a power of two"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:30
msgid "``roundUp(that : BigInt, by : BigInt)``"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:31
msgid "BigInt"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:32
msgid "Return the first ``by`` multiply from ``that`` (included)"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:33
msgid "``Cat(x : Data*)``"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:34
msgid "Bits"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:35
msgid "Concatenate all arguments, the first in MSB, the last in LSB"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:39
msgid "Cloning hardware datatypes"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:41
msgid "You can clone a given hardware data type by using the ``cloneOf(x)`` function. It will return a new instance of the same Scala type and parameters."
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:44
msgid "For example:"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:58
msgid "You can get more information about how hardware data types are managed on the :ref:`Hardware types page <hardware_type>`."
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:61
msgid "If you use the ``cloneOf`` function on a ``Bundle``, this ``Bundle`` should be a ``case class`` or should override the clone function internally."
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:65
msgid "Passing a datatype as construction parameter"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:67
msgid "Many pieces of reusable hardware need to be parameterized by some data type. For example if you want to define a FIFO or a shift register, you need a parameter to specify which kind of payload you want for the component."
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:70
msgid "There are two similar ways to do this."
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:73
msgid "The old way"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:75
msgid "A good example of the old way to do this is in this definition of a ``ShiftRegister`` component:"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:87
msgid "And here is how you can instantiate the component:"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:93
msgid "As you can see, the raw hardware type is directly passed as a construction parameter. Then each time you want to create an new instance of that kind of hardware data type, you need to use the ``cloneOf(...)`` function. Doing things this way is not super safe as it's easy to forget to use ``cloneOf``."
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:98
msgid "The safe way"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:100
msgid "An example of the safe way to pass a data type parameter is as follows:"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:112
msgid "And here is how you instantiate the component (exactly the same as before):"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:118
msgid "Notice how the example above uses a ``HardType`` wrapper around the raw data type ``T``, which is a \"blueprint\" definition of a hardware data type. This way of doing things is easier to use than the \"old way\", because to create a new instance of the hardware data type you only need to call the ``apply`` function of that ``HardType`` (or in other words, just add parentheses after the parameter)."
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:121
msgid "Additionally, this mechanism is completely transparent from the point of view of the user, as a hardware data type can be implicitly converted into a ``HardType``."
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:124
msgid "Frequency and time"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:126
msgid "SpinalHDL has a dedicated syntax to define frequency and time values:"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:137
msgid "For time definitions you can use following postfixes to get a ``TimeNumber``:"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:138
msgid "``fs``, ``ps``, ``ns``, ``us``, ``ms``, ``sec``, ``mn``, ``hr``"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:140
msgid "For time definitions you can use following postfixes to get a ``HertzNumber``:"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:141
msgid "``Hz``, ``KHz``, ``MHz``, ``GHz``, ``THz``"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:143
msgid "``TimeNumber`` and ``HertzNumber`` are based on the ``PhysicalNumber`` class which use  scala ``BigDecimal`` to store numbers."
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:146
msgid "Binary prefix"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:148
msgid "SpinalHDL allows the definition of integer numbers using binary prefix notation according to IEC."
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:155
msgid "The following binary prefix notations are available:"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:161
msgid "Binary Prefix"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:162
msgid "Value"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:163
msgid "Byte, Bytes"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:164
msgid "1"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:165
msgid "KiB"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:166
msgid "1024 == 1 << 10"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:167
msgid "MiB"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:168
msgid "1024\\ :sup:`2` == 1 << 20"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:169
msgid "GiB"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:170
msgid "1024\\ :sup:`3` == 1 << 30"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:171
msgid "TiB"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:172
msgid "1024\\ :sup:`4` == 1 << 40"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:173
msgid "PiB"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:174
msgid "1024\\ :sup:`5` == 1 << 50"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:175
msgid "EiB"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:176
msgid "1024\\ :sup:`6` == 1 << 60"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:177
msgid "ZiB"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:178
msgid "1024\\ :sup:`7` == 1 << 70"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:179
msgid "YiB"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:180
msgid "1024\\ :sup:`8` == 1 << 80"
msgstr ""

#: ../../source/SpinalHDL/Other language features/utils.rst:183
msgid "Of course, BigInt can also be printed as a string in bytes unit. ``BigInt(1024).byteUnit``."
msgstr ""
