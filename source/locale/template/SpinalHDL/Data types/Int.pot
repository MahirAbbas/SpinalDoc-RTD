# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/Data types/Int.rst:7
#: ../../source/SpinalHDL/Data types/Int.rst:556
msgid "UInt/SInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:10
#: ../../source/SpinalHDL/Data types/Int.rst:24
#: ../../source/SpinalHDL/Data types/Int.rst:90
#: ../../source/SpinalHDL/Data types/Int.rst:191
#: ../../source/SpinalHDL/Data types/Int.rst:248
#: ../../source/SpinalHDL/Data types/Int.rst:292
#: ../../source/SpinalHDL/Data types/Int.rst:337
#: ../../source/SpinalHDL/Data types/Int.rst:381
#: ../../source/SpinalHDL/Data types/Int.rst:610
msgid "Description"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:12
msgid "The ``UInt``/``SInt`` type corresponds to a vector of bits that can be used for signed/unsigned integer arithmetic."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:15
msgid "Declaration"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:17
msgid "The syntax to declare an integer is as follows:  (everything between [] is optional)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:23
msgid "Syntax"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:25
#: ../../source/SpinalHDL/Data types/Int.rst:192
#: ../../source/SpinalHDL/Data types/Int.rst:293
#: ../../source/SpinalHDL/Data types/Int.rst:338
#: ../../source/SpinalHDL/Data types/Int.rst:382
#: ../../source/SpinalHDL/Data types/Int.rst:610
msgid "Return"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "UInt[()]"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "SInt[()]"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:28
msgid "Create an unsigned/signed integer, bits count is inferred"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
#: ../../source/SpinalHDL/Data types/Int.rst:559
#: ../../source/SpinalHDL/Data types/Int.rst:561
#: ../../source/SpinalHDL/Data types/Int.rst:564
#: ../../source/SpinalHDL/Data types/Int.rst:565
msgid "SInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "UInt(x bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "SInt(x bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:33
msgid "Create an unsigned/signed integer with x bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "U(value: Int[,x bits])"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "U(value: BigInt[,x bits])"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "S(value: Int[,x bits])"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "S(value: BigInt[,x bits])"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:40
msgid "Create an unsigned/signed integer assigned with 'value'"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "U\"[[size']base]value\""
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "S\"[[size']base]value\""
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:45
msgid "Create an unsigned/signed integer assigned with 'value' (Base : 'h', 'd', 'o', 'b')"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "U([x bits,] :ref:`element <element>`, ...)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "S([x bits,] :ref:`element <element>`, ...)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:50
msgid "Create an unsigned integer assigned with the value specified by elements"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:78
msgid "Operators"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:80
msgid "The following operators are available for the ``UInt`` and ``SInt`` types:"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:83
msgid "Logic"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:89
#: ../../source/SpinalHDL/Data types/Int.rst:190
#: ../../source/SpinalHDL/Data types/Int.rst:247
#: ../../source/SpinalHDL/Data types/Int.rst:291
#: ../../source/SpinalHDL/Data types/Int.rst:336
#: ../../source/SpinalHDL/Data types/Int.rst:380
msgid "Operator"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:91
#: ../../source/SpinalHDL/Data types/Int.rst:249
msgid "Return type"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:92
msgid "~x"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:93
msgid "Bitwise NOT"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:94
#: ../../source/SpinalHDL/Data types/Int.rst:118
#: ../../source/SpinalHDL/Data types/Int.rst:127
#: ../../source/SpinalHDL/Data types/Int.rst:130
#: ../../source/SpinalHDL/Data types/Int.rst:133
#: ../../source/SpinalHDL/Data types/Int.rst:136
#: ../../source/SpinalHDL/Data types/Int.rst:216
#: ../../source/SpinalHDL/Data types/Int.rst:426
msgid "T(w(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:95
msgid "x & y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:96
msgid "Bitwise AND"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:97
#: ../../source/SpinalHDL/Data types/Int.rst:100
#: ../../source/SpinalHDL/Data types/Int.rst:103
#: ../../source/SpinalHDL/Data types/Int.rst:195
#: ../../source/SpinalHDL/Data types/Int.rst:201
#: ../../source/SpinalHDL/Data types/Int.rst:204
#: ../../source/SpinalHDL/Data types/Int.rst:210
msgid "T(max(w(x), w(y)) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:98
msgid "x | y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:99
msgid "Bitwise OR"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:101
msgid "x ^ y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:102
msgid "Bitwise XOR"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:104
msgid "x.xorR"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:105
msgid "XOR all bits of x"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:106
#: ../../source/SpinalHDL/Data types/Int.rst:109
#: ../../source/SpinalHDL/Data types/Int.rst:112
#: ../../source/SpinalHDL/Data types/Int.rst:252
#: ../../source/SpinalHDL/Data types/Int.rst:255
#: ../../source/SpinalHDL/Data types/Int.rst:258
#: ../../source/SpinalHDL/Data types/Int.rst:261
#: ../../source/SpinalHDL/Data types/Int.rst:264
#: ../../source/SpinalHDL/Data types/Int.rst:267
#: ../../source/SpinalHDL/Data types/Int.rst:341
#: ../../source/SpinalHDL/Data types/Int.rst:350
#: ../../source/SpinalHDL/Data types/Int.rst:388
#: ../../source/SpinalHDL/Data types/Int.rst:391
#: ../../source/SpinalHDL/Data types/Int.rst:438
msgid "Bool"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:107
msgid "x.orR"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:108
msgid "OR all bits of x"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:110
msgid "x.andR"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:111
msgid "AND all bits of x"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:113
#: ../../source/SpinalHDL/Data types/Int.rst:116
msgid "x \\>\\> y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:114
msgid "Arithmetic shift right, y : Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:115
msgid "T(w(x) - y bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:117
msgid "Arithmetic shift right, y : UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:119
#: ../../source/SpinalHDL/Data types/Int.rst:122
msgid "x \\<\\< y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:120
msgid "Arithmetic shift left, y : Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:121
msgid "T(w(x) + y bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:123
msgid "Arithmetic shift left, y : UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:124
msgid "T(w(x) + max(y) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:125
msgid "x \\|\\>\\> y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:126
msgid "Logical shift right, y : Int/UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:128
msgid "x \\|\\<\\< y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:129
msgid "Logical shift left, y : Int/UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:131
msgid "x.rotateLeft(y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:132
msgid "Logical left rotation, y : UInt/Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:134
msgid "x.rotateRight(y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:135
msgid "Logical right rotation, y : UInt/Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:137
msgid "x.clearAll[()]"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:138
msgid "Clear all bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:140
msgid "x.setAll[()]"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:141
msgid "Set all bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:143
msgid "x.setAllTo(value : Boolean)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:144
msgid "Set all bits to the given Boolean value"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:146
msgid "x.setAllTo(value : Bool)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:147
msgid "Set all bits to the given Bool value"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:152
msgid "``x rotateLeft y`` and ``x rotateRight y`` are also valid syntax."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:156
msgid "Notice the difference between ``x >> 2``:T(w(x)-2) and ``x >> U(2)``:T(w(x))."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:158
msgid "The difference is that in the first case 2 is an ``Int`` (which can be seen as an \"elaboration integer\"), and in the second case it is a hardware signal."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:185
msgid "Arithmetic"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:193
msgid "x + y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:194
msgid "Addition"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:196
msgid "x +^ y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:197
msgid "Addition with carry"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:198
#: ../../source/SpinalHDL/Data types/Int.rst:207
msgid "T(max(w(x), w(y)) + 1 bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:199
msgid "x +| y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:200
msgid "Addition by sat carry bit"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:202
msgid "x - y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:203
msgid "Subtraction"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:205
msgid "x -^ y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:206
msgid "Subtraction with carry"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:208
msgid "x -| y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:209
msgid "Subtraction by sat carry bit"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:211
msgid "x * y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:212
msgid "Multiplication"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:213
msgid "T(w(x) + w(y)) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:214
msgid "x / y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:215
msgid "Division"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:217
msgid "x % y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:218
msgid "Modulo"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:219
msgid "T(min(w(x), w(y)) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:238
msgid "Notice how simulation assertions are made here (with ``===``), as opposed to elaboration assertions in the previous example (with ``==``)."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:242
msgid "Comparison"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:250
msgid "x === y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:251
msgid "Equality"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:253
msgid "x =/= y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:254
msgid "Inequality"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:256
msgid "x > y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:257
msgid "Greater than"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:259
msgid "x >= y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:260
msgid "Greater than or equal"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:262
msgid "x < y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:263
msgid "Less than"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:265
msgid "x <= y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:266
msgid "Less than or equal"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:286
msgid "Type cast"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:294
msgid "x.asBits"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:295
msgid "Binary cast to Bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:296
msgid "Bits(w(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:297
msgid "x.asUInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:298
msgid "Binary cast to UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:299
#: ../../source/SpinalHDL/Data types/Int.rst:311
msgid "UInt(w(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:300
msgid "x.asSInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:301
msgid "Binary cast to SInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:302
#: ../../source/SpinalHDL/Data types/Int.rst:308
msgid "SInt(w(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:303
msgid "x.asBools"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:304
msgid "Cast into a array of Bool"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:305
msgid "Vec(Bool(), w(x))"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:306
msgid "S(x: T)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:307
msgid "Cast a Data into a SInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:309
msgid "U(x: T)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:310
msgid "Cast a Data into an UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:312
msgid "x.intoSInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:313
msgid "Convert to SInt expanding sign bit"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:314
msgid "SInt(w(x) + 1 bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:316
msgid "To cast a ``Bool``, a ``Bits``, or an ``SInt`` into a ``UInt``, you can use ``U(something)``. To cast things into an ``SInt``, you can use ``S(something)``."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:330
msgid "Bit extraction"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:339
msgid "x(y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:340
msgid "Readbit, y : Int/UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:342
msgid "x(offset, width)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:343
msgid "Read bitfield, offset: UInt, width: Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:344
#: ../../source/SpinalHDL/Data types/Int.rst:353
msgid "T(width bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:345
msgid "x(\\ :ref:`range <range>`\\ )"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:346
msgid "Read a range of bits. Ex : myBits(4 downto 2)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:347
#: ../../source/SpinalHDL/Data types/Int.rst:356
msgid "T(range bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:348
msgid "x(y) := z"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:349
msgid "Assign bits, y : Int/UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:351
msgid "x(offset, width) := z"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:352
msgid "Assign bitfield, offset: UInt, width: Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:354
msgid "x(\\ :ref:`range <range>`\\ ) := z"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:355
msgid "Assign a range of bit. Ex : myBits(4 downto 2) := U\"010\""
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:374
msgid "Misc"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:383
msgid "x.getWidth"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:384
msgid "Return bitcount"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:385
#: ../../source/SpinalHDL/Data types/Int.rst:394
msgid "Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:386
msgid "x.msb"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:387
msgid "Return the most significant bit"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:389
msgid "x.lsb"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:390
msgid "Return the least significant bit"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:392
msgid "x.high"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:393
msgid "Return the index of the MSB (highest allowed index for Int)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:395
msgid "x.bitsRange"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:396
msgid "Return the range (0 to x.high)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:397
#: ../../source/SpinalHDL/Data types/Int.rst:406
msgid "Range"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:398
msgid "x.minValue"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:399
msgid "Lowest possible value of x (e.g. 0 for UInt)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:400
#: ../../source/SpinalHDL/Data types/Int.rst:403
msgid "BigInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:401
msgid "x.maxValue"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:402
msgid "Highest possible value of x"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:404
msgid "x.valueRange"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:405
msgid "Return the range from minimum to maximum possible value of x (x.minValue to x.maxValue)."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:407
msgid "x ## y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:408
msgid "Concatenate, x->high, y->low"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:409
msgid "Bits(w(x) + w(y) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:410
msgid "x @@ y"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:411
msgid "Concatenate x:T with y:Bool/SInt/UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:412
msgid "T(w(x) + w(y) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:413
msgid "x.subdivideIn(y slices)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:414
msgid "Subdivide x into y slices, y: Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:415
msgid "Vec(T,  y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:416
msgid "x.subdivideIn(y bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:417
msgid "Subdivide x into multiple slices of y bits, y: Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:418
msgid "Vec(T, w(x)/y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:419
msgid "x.resize(y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "Return a resized copy of x, if enlarged, it is filled with zero"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "for UInt or filled with the sign for SInt, y: Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:422
msgid "T(y bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:423
msgid "x.resized"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "Return a version of x which is allowed to be automatically"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:0
msgid "resized where needed"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:427
msgid "myUInt.twoComplement(en: Bool)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:428
msgid "Use the two's complement to transform an UInt into an SInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:429
msgid "SInt(w(myUInt) + 1, bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:430
msgid "mySInt.abs"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:431
msgid "Return the absolute value as a UInt value"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:432
#: ../../source/SpinalHDL/Data types/Int.rst:435
msgid "UInt(w(mySInt), bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:433
msgid "mySInt.abs(en: Bool)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:434
msgid "Return the absolute value as a UInt value when en is True"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:436
msgid "mySInt.sign"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:437
msgid "Return most significant bit"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:439
msgid "x.expand"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:440
msgid "Return x with 1 bit expand"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:441
msgid "T(w(x)+1 bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:442
msgid "mySInt.absWithSym"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:443
msgid "Return the absolute value of the UInt value with symmetric, shrink 1 bit"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:444
msgid "UInt(w(mySInt) - 1 bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:447
msgid "`validRange` can only be used for types where the minimum and maximum values fit into a signed 32-bit integer. (This is a limitation given by the Scala range type which uses `Int`)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:483
msgid "FixPoint operations"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:485
msgid "For fixpoint, we can divide it into two parts:"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:487
msgid "Lower bit operations (rounding methods)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:488
msgid "High bit operations (saturation operations)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:491
msgid "Lower bit operations"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:495
msgid "About Rounding: https://en.wikipedia.org/wiki/Rounding"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:498
msgid "SpinalHDL-Name"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:498
msgid "Wikipedia-Name"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:498
#: ../../source/SpinalHDL/Data types/Int.rst:556
msgid "API"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:498
msgid "Mathematic Algorithm"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:498
msgid "return(align=false)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:498
msgid "Supported"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:500
msgid "FLOOR"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:500
msgid "RoundDown"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:500
#: ../../source/SpinalHDL/Data types/Int.rst:558
msgid "floor"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:500
msgid "floor(x)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:500
#: ../../source/SpinalHDL/Data types/Int.rst:501
#: ../../source/SpinalHDL/Data types/Int.rst:558
#: ../../source/SpinalHDL/Data types/Int.rst:559
msgid "w(x)-n   bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:500
#: ../../source/SpinalHDL/Data types/Int.rst:501
#: ../../source/SpinalHDL/Data types/Int.rst:502
#: ../../source/SpinalHDL/Data types/Int.rst:503
#: ../../source/SpinalHDL/Data types/Int.rst:504
#: ../../source/SpinalHDL/Data types/Int.rst:505
#: ../../source/SpinalHDL/Data types/Int.rst:506
#: ../../source/SpinalHDL/Data types/Int.rst:507
msgid "Yes"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:501
msgid "FLOORTOZERO"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:501
msgid "RoundToZero"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:501
#: ../../source/SpinalHDL/Data types/Int.rst:559
msgid "floorToZero"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:501
msgid "sign*floor(abs(x))"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:502
msgid "CEIL"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:502
msgid "RoundUp"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:502
#: ../../source/SpinalHDL/Data types/Int.rst:560
msgid "ceil"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:502
msgid "ceil(x)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:502
#: ../../source/SpinalHDL/Data types/Int.rst:503
#: ../../source/SpinalHDL/Data types/Int.rst:504
#: ../../source/SpinalHDL/Data types/Int.rst:505
#: ../../source/SpinalHDL/Data types/Int.rst:506
#: ../../source/SpinalHDL/Data types/Int.rst:507
#: ../../source/SpinalHDL/Data types/Int.rst:560
#: ../../source/SpinalHDL/Data types/Int.rst:561
#: ../../source/SpinalHDL/Data types/Int.rst:562
#: ../../source/SpinalHDL/Data types/Int.rst:563
#: ../../source/SpinalHDL/Data types/Int.rst:564
#: ../../source/SpinalHDL/Data types/Int.rst:565
#: ../../source/SpinalHDL/Data types/Int.rst:566
msgid "w(x)-n+1 bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:503
msgid "CEILTOINF"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:503
msgid "RoundToInf"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:503
#: ../../source/SpinalHDL/Data types/Int.rst:561
msgid "ceilToInf"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:503
msgid "sign*ceil(abs(x))"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:504
msgid "ROUNDUP"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:504
msgid "RoundHalfUp"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:504
#: ../../source/SpinalHDL/Data types/Int.rst:562
msgid "roundUp"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:504
msgid "floor(x+0.5)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:505
msgid "ROUNDDOWN"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:505
msgid "RoundHalfDown"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:505
#: ../../source/SpinalHDL/Data types/Int.rst:563
msgid "roundDown"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:505
msgid "ceil(x-0.5)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:506
msgid "ROUNDTOZERO"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:506
msgid "RoundHalfToZero"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:506
#: ../../source/SpinalHDL/Data types/Int.rst:565
msgid "roundToZero"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:506
msgid "sign*ceil(abs(x)-0.5)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:507
#: ../../source/SpinalHDL/Data types/Int.rst:520
#: ../../source/SpinalHDL/Data types/Int.rst:521
#: ../../source/SpinalHDL/Data types/Int.rst:524
msgid "ROUNDTOINF"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:507
msgid "RoundHalfToInf"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:507
#: ../../source/SpinalHDL/Data types/Int.rst:564
msgid "roundToInf"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:507
msgid "sign*floor(abs(x)+0.5)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:508
#: ../../source/SpinalHDL/Data types/Int.rst:522
msgid "ROUNDTOEVEN"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:508
msgid "RoundHalfToEven"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:508
msgid "roundToEven"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:508
#: ../../source/SpinalHDL/Data types/Int.rst:509
msgid "No"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:509
msgid "ROUNDTOODD"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:509
msgid "RoundHalfToOdd"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:509
msgid "roundToOdd"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:513
msgid "The **RoundToEven** and **RoundToOdd** modes are very special, and are used in some big data statistical fields with high accuracy concerns, SpinalHDL doesn't support them yet."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:515
msgid "You will find `ROUNDUP`, `ROUNDDOWN`, `ROUNDTOZERO`, `ROUNDTOINF`, `ROUNDTOEVEN`, `ROUNTOODD` are very close in behavior, `ROUNDTOINF` is the most common. The behavior of rounding in different programming languages may be different."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:518
msgid "Programming language"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:518
msgid "default-RoundType"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:518
msgid "Example"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:518
msgid "comments"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:520
msgid "Matlab"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:520
#: ../../source/SpinalHDL/Data types/Int.rst:521
#: ../../source/SpinalHDL/Data types/Int.rst:524
msgid "round(1.5)=2,round(2.5)=3;round(-1.5)=-2,round(-2.5)=-3"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:520
#: ../../source/SpinalHDL/Data types/Int.rst:521
#: ../../source/SpinalHDL/Data types/Int.rst:524
msgid "round to ±Infinity"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:521
msgid "python2"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:522
msgid "python3"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:522
msgid "round(1.5)=round(2.5)=2;  round(-1.5)=round(-2.5)=-2"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:522
msgid "close to Even"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:523
msgid "Scala.math"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:523
msgid "ROUNDTOUP"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:523
msgid "round(1.5)=2,round(2.5)=3;round(-1.5)=-1,round(-2.5)=-2"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:523
msgid "always to +Infinity"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:524
msgid "SpinalHDL"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:528
msgid "In SpinalHDL `ROUNDTOINF` is the default RoundType (``round = roundToInf``)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:551
msgid "Only ``floor`` and ``floorToZero`` work without the ``align`` option; they do not need a carry bit. Other rounding operations default to using a carry bit."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:553
msgid "**round Api**"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:556
msgid "description"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:556
msgid "Return(align=false)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:556
msgid "Return(align=true)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:558
#: ../../source/SpinalHDL/Data types/Int.rst:560
#: ../../source/SpinalHDL/Data types/Int.rst:562
#: ../../source/SpinalHDL/Data types/Int.rst:563
#: ../../source/SpinalHDL/Data types/Int.rst:566
msgid "Both"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:558
#: ../../source/SpinalHDL/Data types/Int.rst:559
#: ../../source/SpinalHDL/Data types/Int.rst:560
#: ../../source/SpinalHDL/Data types/Int.rst:561
#: ../../source/SpinalHDL/Data types/Int.rst:562
#: ../../source/SpinalHDL/Data types/Int.rst:563
#: ../../source/SpinalHDL/Data types/Int.rst:564
#: ../../source/SpinalHDL/Data types/Int.rst:565
#: ../../source/SpinalHDL/Data types/Int.rst:566
msgid "w(x)-n bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:559
msgid "equal to floor in UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:561
msgid "equal to ceil in UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:562
msgid "simple for HW"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:564
msgid "most Common"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:565
msgid "equal to roundDown in UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:566
msgid "round"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:566
msgid "SpinalHDL chose roundToInf"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:570
msgid "Although ``roundToInf`` is very common, ``roundUp`` has the least cost and good timing, with almost no performance loss. As a result, ``roundUp`` is strongly recommended for production use."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:574
msgid "High bit operations"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:579
msgid "function"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:579
msgid "Operation"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:579
msgid "Positive-Op"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:579
msgid "Negative-Op"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:581
msgid "sat"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:581
msgid "Saturation"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:581
msgid "when(Top[w-1, w-n].orR) set maxValue"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:581
msgid "When(Top[w-1, w-n].andR) set minValue"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:582
msgid "trim"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:582
msgid "Discard"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:582
#: ../../source/SpinalHDL/Data types/Int.rst:583
msgid "N/A"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:583
msgid "symmetry"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:583
msgid "Symmetric"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:583
msgid "minValue = -maxValue"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:586
msgid "Symmetric is only valid for ``SInt``."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:599
msgid "fixTo function"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:601
msgid "Two ways are provided in ``UInt``/``SInt`` to do fixpoint:"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:605
msgid "``fixTo`` is strongly recommended in your RTL work, you don't need to handle carry bit alignment and bit width calculations manually like **Way1** in the above diagram."
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:607
msgid "Factory Fix function with Auto Saturation:"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:610
msgid "Function"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:612
msgid "fixTo(section, roundType, symmetric)"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:612
msgid "Factory FixFunction"
msgstr ""

#: ../../source/SpinalHDL/Data types/Int.rst:612
msgid "section.size bits"
msgstr ""
