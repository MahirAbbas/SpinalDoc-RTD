# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/Data types/bits.rst:4
#: ../../source/SpinalHDL/Data types/bits.rst:25
#: ../../source/SpinalHDL/Data types/bits.rst:28
#: ../../source/SpinalHDL/Data types/bits.rst:32
#: ../../source/SpinalHDL/Data types/bits.rst:35
#: ../../source/SpinalHDL/Data types/bits.rst:38
msgid "Bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:7
#: ../../source/SpinalHDL/Data types/bits.rst:21
#: ../../source/SpinalHDL/Data types/bits.rst:72
#: ../../source/SpinalHDL/Data types/bits.rst:160
#: ../../source/SpinalHDL/Data types/bits.rst:185
#: ../../source/SpinalHDL/Data types/bits.rst:225
#: ../../source/SpinalHDL/Data types/bits.rst:270
msgid "Description"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:9
msgid "The ``Bits`` type corresponds to a vector of bits that does not convey any arithmetic meaning."
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:12
msgid "Declaration"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:14
msgid "The syntax to declare a bit vector is as follows: (everything between [] is optional)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:20
msgid "Syntax"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:22
#: ../../source/SpinalHDL/Data types/bits.rst:186
#: ../../source/SpinalHDL/Data types/bits.rst:226
#: ../../source/SpinalHDL/Data types/bits.rst:271
msgid "Return"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:23
msgid "Bits [()]"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:24
msgid "Create a BitVector, bits count is inferred"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:26
#: ../../source/SpinalHDL/Data types/bits.rst:307
msgid "Bits(x bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:27
msgid "Create a BitVector with x bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:0
msgid "B(value: Int[, x bits])"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:0
msgid "B(value: BigInt[, x bits])"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:31
msgid "Create a BitVector with x bits assigned with 'value'"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:33
msgid "B\"[[size']base]value\""
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:34
msgid "Create a BitVector assigned with 'value' (Base: 'h', 'd', 'o', 'b')"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:36
msgid "B([x bits,] :ref:`element <element>`\\ , ...)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:37
msgid "Create a BitVector assigned with the value specified by elements"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:60
msgid "Operators"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:62
msgid "The following operators are available for the ``Bits`` type:"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:65
msgid "Logic"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:71
#: ../../source/SpinalHDL/Data types/bits.rst:159
#: ../../source/SpinalHDL/Data types/bits.rst:184
#: ../../source/SpinalHDL/Data types/bits.rst:224
#: ../../source/SpinalHDL/Data types/bits.rst:269
msgid "Operator"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:73
#: ../../source/SpinalHDL/Data types/bits.rst:161
msgid "Return type"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:74
msgid "~x"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:75
msgid "Bitwise NOT"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:76
#: ../../source/SpinalHDL/Data types/bits.rst:100
#: ../../source/SpinalHDL/Data types/bits.rst:109
#: ../../source/SpinalHDL/Data types/bits.rst:112
#: ../../source/SpinalHDL/Data types/bits.rst:115
#: ../../source/SpinalHDL/Data types/bits.rst:118
#: ../../source/SpinalHDL/Data types/bits.rst:189
#: ../../source/SpinalHDL/Data types/bits.rst:201
#: ../../source/SpinalHDL/Data types/bits.rst:304
msgid "Bits(w(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:77
msgid "x & y"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:78
msgid "Bitwise AND"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:79
#: ../../source/SpinalHDL/Data types/bits.rst:82
#: ../../source/SpinalHDL/Data types/bits.rst:85
msgid "Bits(w(xy) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:80
msgid "x | y"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:81
msgid "Bitwise OR"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:83
msgid "x ^ y"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:84
msgid "Bitwise XOR"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:86
msgid "x.xorR"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:87
msgid "XOR all bits of x"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:88
#: ../../source/SpinalHDL/Data types/bits.rst:91
#: ../../source/SpinalHDL/Data types/bits.rst:94
#: ../../source/SpinalHDL/Data types/bits.rst:164
#: ../../source/SpinalHDL/Data types/bits.rst:167
#: ../../source/SpinalHDL/Data types/bits.rst:229
#: ../../source/SpinalHDL/Data types/bits.rst:238
#: ../../source/SpinalHDL/Data types/bits.rst:286
#: ../../source/SpinalHDL/Data types/bits.rst:289
msgid "Bool"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:89
msgid "x.orR"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:90
msgid "OR all bits of x"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:92
msgid "x.andR"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:93
msgid "AND all bits of x"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:95
#: ../../source/SpinalHDL/Data types/bits.rst:98
msgid "x \\>\\> y"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:96
msgid "Logical shift right, y: Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:97
msgid "Bits(w(x) - y bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:99
msgid "Logical shift right, y: UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:101
#: ../../source/SpinalHDL/Data types/bits.rst:104
msgid "x \\<\\< y"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:102
msgid "Logical shift left, y: Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:103
msgid "Bits(w(x) + y bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:105
msgid "Logical shift left, y: UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:106
msgid "Bits(w(x) + max(y) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:107
msgid "x \\|\\>\\> y"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:108
msgid "Logical shift right, y: Int/UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:110
msgid "x \\|\\<\\< y"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:111
msgid "Logical shift left, y: Int/UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:113
msgid "x.rotateLeft(y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:114
msgid "Logical left rotation, y: UInt/Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:116
msgid "x.rotateRight(y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:117
msgid "Logical right rotation, y: UInt/Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:119
msgid "x.clearAll[()]"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:120
msgid "Clear all bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:122
msgid "x.setAll[()]"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:123
msgid "Set all bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:125
msgid "x.setAllTo(value: Boolean)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:126
msgid "Set all bits to the given Boolean value"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:128
msgid "x.setAllTo(value: Bool)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:129
msgid "Set all bits to the given Bool value"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:154
msgid "Comparison"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:162
msgid "x === y"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:163
msgid "Equality"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:165
msgid "x =/= y"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:166
msgid "Inequality"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:179
msgid "Type cast"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:187
msgid "x.asBits"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:188
msgid "Binary cast to Bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:190
msgid "x.asUInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:191
msgid "Binary cast to UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:192
msgid "UInt(w(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:193
msgid "x.asSInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:194
msgid "Binary cast to SInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:195
msgid "SInt(w(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:196
msgid "x.asBools"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:197
msgid "Cast to an array of Bools"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:198
msgid "Vec(Bool(), w(x))"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:199
msgid "B(x: T)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:200
msgid "Cast Data to Bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:204
msgid "To cast a ``Bool``, ``UInt`` or an ``SInt`` into a ``Bits``, you can use ``B(something)``:"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:218
msgid "Bit extraction"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:227
msgid "x(y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:228
msgid "Readbit, y: Int/UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:230
msgid "x(offset,width bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:231
msgid "Read bitfield, offset: UInt, width: Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:232
#: ../../source/SpinalHDL/Data types/bits.rst:241
msgid "Bits(width bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:233
msgid "x(\\ :ref:`range <range>`\\ )"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:234
msgid "Read a range of bit. Ex : myBits(4 downto 2)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:235
#: ../../source/SpinalHDL/Data types/bits.rst:244
msgid "Bits(range bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:236
msgid "x(y) := z"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:237
msgid "Assign bits, y: Int/UInt"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:239
msgid "x(offset, width bits) := z"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:240
msgid "Assign bitfield, offset: UInt, width: Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:242
msgid "x(\\ :ref:`range <range>`\\ ) := z"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:243
msgid "Assign a range of bit. Ex : myBits(4 downto 2) := B\"010\""
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:263
msgid "Misc"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:272
msgid "x.getWidth"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:273
msgid "Return bitcount"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:274
#: ../../source/SpinalHDL/Data types/bits.rst:283
msgid "Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:275
msgid "x.bitsRange"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:276
msgid "Return the range (0 to x.high)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:277
#: ../../source/SpinalHDL/Data types/bits.rst:280
msgid "Range"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:278
msgid "x.valueRange"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:279
msgid "Return the range of minimum to maximum x values, interpreted as an unsigned integer (0 to 2 \\*\\* width - 1)."
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:281
msgid "x.high"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:282
msgid "Return the index of the MSB (highest allowed index for Bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:284
msgid "x.msb"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:285
msgid "Return the most significant bit"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:287
msgid "x.lsb"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:288
msgid "Return the least significant bit"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:290
msgid "x ## y"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:291
msgid "Concatenate, x->high, y->low"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:292
msgid "Bits(w(x) + w(y) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:293
msgid "x.subdivideIn(y slices)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:294
msgid "Subdivide x in y slices, y: Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:295
msgid "Vec(Bits, y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:296
msgid "x.subdivideIn(y bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:297
msgid "Subdivide x in multiple slices of y bits, y: Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:298
msgid "Vec(Bits, w(x)/y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:299
msgid "x.resize(y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:300
msgid "Return a resized copy of x, if enlarged, it is filled with zero, y: Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:301
msgid "Bits(y bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:302
msgid "x.resized"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:303
msgid "Return a version of x which is allowed to be automatically resized were needed"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:305
msgid "x.resizeLeft(x)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:306
msgid "Resize by keeping MSB at the same place, x:Int"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:310
msgid "`validRange` can only be used for types where the minimum and maximum values fit into a signed 32-bit integer. (This is a limitation given by the Scala range type which uses `Int`)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:343
msgid "MaskedLiteral"
msgstr ""

#: ../../source/SpinalHDL/Data types/bits.rst:345
msgid "MaskedLiteral values are bit vectors with don’t care values denoted with `-`."
msgstr ""
