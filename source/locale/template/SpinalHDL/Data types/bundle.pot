# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/Data types/bundle.rst:5
msgid "Bundle"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:8
#: ../../source/SpinalHDL/Data types/bundle.rst:60
#: ../../source/SpinalHDL/Data types/bundle.rst:91
#: ../../source/SpinalHDL/Data types/bundle.rst:114
msgid "Description"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:10
msgid "The ``Bundle`` is a composite type that defines a group of named signals (of any SpinalHDL basic type) under a single name."
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:12
msgid "A ``Bundle`` can be used to model data structures, buses, and interfaces."
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:15
msgid "Declaration"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:17
msgid "The syntax to declare a bundle is as follows:"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:27
msgid "For example, a bundle holding a color could be defined as:"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:35
msgid "You can find an :ref:`APB3 definition <example_apb3>` among the :ref:`Spinal HDL examples <example_list>`."
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:38
msgid "Conditional signals"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:39
msgid "The signals in the ``Bundle`` can be defined conditionally. Unless ``dataWidth`` is greater than 0, there will be no ``data`` signal in elaborated ``myBundle``, as demonstrated in the example below."
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:49
msgid "Operators"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:51
msgid "The following operators are available for the ``Bundle`` type:"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:54
msgid "Comparison"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:59
#: ../../source/SpinalHDL/Data types/bundle.rst:90
#: ../../source/SpinalHDL/Data types/bundle.rst:113
msgid "Operator"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:61
msgid "Return type"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:62
msgid "x === y"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:63
msgid "Equality"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:64
#: ../../source/SpinalHDL/Data types/bundle.rst:67
msgid "Bool"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:65
msgid "x =/= y"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:66
msgid "Inequality"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:85
msgid "Type cast"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:92
#: ../../source/SpinalHDL/Data types/bundle.rst:115
msgid "Return"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:93
msgid "x.asBits"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:94
msgid "Binary cast to Bits"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:95
msgid "Bits(w(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:102
msgid "The elements of the bundle will be mapped into place in the order in which they are defined. Thus, ``r`` in ``color1`` will occupy bits 0 to 8 of ``myBits`` (LSB), followed by ``g`` and ``b`` in that order."
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:106
msgid "Convert Bits back to Bundle"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:107
msgid "The ``.assignFromBits`` operator can be viewed as the reverse of ``.asBits``."
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:116
msgid "x.assignFromBits(y)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:117
msgid "Convert Bits (y) to Bundle(x)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:118
#: ../../source/SpinalHDL/Data types/bundle.rst:121
msgid "Unit"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:119
msgid "x.assignFromBits(y, hi, lo)"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:120
msgid "Convert Bits (y) to Bundle(x) with high/low boundary"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:123
msgid "The following example saves a Bundle called CommonDataBus into a circular buffer (3rd party memory), reads the Bits out later and converts them back to CommonDataBus format."
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:155
msgid "IO Element direction"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:157
msgid "When you define a ``Bundle`` inside the IO definition of your component, you need to specify its direction."
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:160
msgid "in/out"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:162
msgid "If all elements of your bundle go in the same direction you can use ``in(MyBundle())`` or ``out(MyBundle())``."
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:164
#: ../../source/SpinalHDL/Data types/bundle.rst:183
msgid "For example:"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:174
msgid "master/slave"
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:176
msgid "If your interface obeys to a master/slave topology, you can use the ``IMasterSlave`` trait. Then you have to implement the function ``def asMaster():Â Unit`` to set the direction of each element from the master's perspective. Then you can use the ``master(MyBundle())`` and ``slave(MyBundle())`` syntax in the IO definition."
msgstr ""

#: ../../source/SpinalHDL/Data types/bundle.rst:178
msgid "There are functions defined as toXXX, such as the ``toStream`` method of the ``Flow`` class. These functions can usually be called by the master side. In addition, the fromXXX functions are designed for the slave side. It is common that there are more functions available for the master side than for the slave side."
msgstr ""
