# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/Formal verification/index.rst:3
msgid "Formal verification"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:7
msgid "General"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:9
msgid "SpinalHDL allows to generate a subset of the SystemVerilog Assertions (SVA). Mostly assert, assume, cover and a few others."
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:11
msgid "In addition it provide a formal verification backend which allows to directly run the formal verification in the open-source Symbi-Yosys toolchain."
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:16
msgid "Formal backend"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:18
msgid "You can run the formal verification of a component via:"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:28
msgid "Currently, 3 modes are supported :"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:30
msgid "withBMC(depth)"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:31
msgid "withProve(depth)"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:32
msgid "withCover(depth)"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:35
msgid "Installing requirements"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:37
msgid "To install the Symbi-Yosys, you have a few options. You can fetch a precompiled package at:"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:39
msgid "https://github.com/YosysHQ/oss-cad-suite-build/releases"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:40
msgid "https://github.com/YosysHQ/fpga-toolchain/releases"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:42
msgid "Or you can compile things from scratch :"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:44
msgid "https://symbiyosys.readthedocs.io/en/latest/install.html"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:48
msgid "Example"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:52
msgid "External assertions"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:54
msgid "Here is an example of a simple counter and the corresponding formal testbench."
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:91
msgid "Internal assertions"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:93
msgid "If you want you can embed formal statements directly into the DUT:"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:120
msgid "External stimulus"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:122
msgid "If your DUT has inputs, you need to drive them from the testbench. You can use all the regular hardware statements to do it, but you can also use the formal `anyseq`, `anyconst`, `allseq`, `allconst` statement:"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:151
msgid "More assertions / past"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:153
msgid "For instance we can check that the value is counting up (if not already at 10):"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:169
msgid "Assuming memory content"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:171
msgid "Here is an example where we want to prevent the value ``1`` from ever being present in a memory :"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:207
msgid "Utilities and primitives"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:210
msgid "Assertions / clock / reset"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:212
msgid "Assertions are always clocked and disabled during resets. This also apply for assumes and covers."
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:214
msgid "If you want to keep your assertion enabled during reset you can do:"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:224
msgid "Specifying the initial value of a signal"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:226
msgid "For instance, for the reset signal of the current clockdomain (usefull at the top)"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:233
msgid "Specifying a initial assumption"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:240
msgid "Memory content (Mem)"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:242
msgid "If you have a Mem in your design, and you want to check its content, you can do it the following ways :"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:257
msgid "Specifying assertion in the reset scope"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:267
msgid "Formal primitives"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:273
msgid "Syntax"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:274
msgid "Returns"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:275
msgid "Description"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:276
msgid "``assert(Bool)``"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:279
msgid "``assume(Bool)``"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:282
msgid "``cover(Bool)``"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:0
msgid "``past(that : T, delay : Int)``"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:0
msgid "``past(that : T)``"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:287
msgid "T"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:288
msgid "Return ``that`` delayed by ``delay`` cycles. (default 1 cycle)"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:289
msgid "``rose(that : Bool)``"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:290
#: ../../source/SpinalHDL/Formal verification/index.rst:293
#: ../../source/SpinalHDL/Formal verification/index.rst:296
#: ../../source/SpinalHDL/Formal verification/index.rst:299
#: ../../source/SpinalHDL/Formal verification/index.rst:302
#: ../../source/SpinalHDL/Formal verification/index.rst:305
#: ../../source/SpinalHDL/Formal verification/index.rst:308
msgid "Bool"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:291
msgid "Return True when ``that`` transitioned from False to True"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:292
msgid "``fell(that : Bool)``"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:294
msgid "Return True when ``that`` transitioned from True to False"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:295
msgid "``changed(that : Bool)``"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:297
msgid "Return True when ``that`` current value changed between comparred to the last cycle"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:298
msgid "``stable(that : Bool)``"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:300
msgid "Return True when ``that`` current value didn't changed between comparred to the last cycle"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:301
msgid "``initstate()``"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:303
msgid "Return True the first cycle"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:304
msgid "``pastValid()``"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:306
msgid "Returns True when the past value is valid (False on the first cycle). Recommended to be used with each application of ``past``, ``rose``, ``fell``, ``changed`` and ``stable``."
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:307
msgid "``pastValidAfterReset()``"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:309
msgid "Simliar to ``pastValid``, where only difference is that this would take reset into account. Can be understand as ``pastValid & past(!reset)``."
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:311
msgid "Note that you can use the init statement on past:"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:320
msgid "Limitations"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:322
msgid "There is no support for unclocked assertions. But their usage in third party formal verification examples seems mostly code style related."
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:326
msgid "Naming polices"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:328
msgid "All formal validation related functions return Area or Composite (preferred), and naming as formalXXXX. ``formalContext`` can be used to create formal related logic, there could be ``formalAsserts``, ``formalAssumes`` and ``formalCovers`` in it."
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:332
msgid "For Component"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:333
msgid "The minimum required assertions internally in a ``Component`` for \"prove\" can be named as ``formalAsserts``."
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:336
msgid "For interfaces implement IMasterSlave"
msgstr ""

#: ../../source/SpinalHDL/Formal verification/index.rst:337
msgid "There could be functions in name ``formalAssertsMaster``, ``formalAssertsSlave``, ``formalAssumesMaster``, ``formalAssumesSlave`` or ``formalCovers``. Master/Slave are target interface type, so that ``formalAssertsMaster`` can be understand as \"formal verfication assertions for master interface\"."
msgstr ""
