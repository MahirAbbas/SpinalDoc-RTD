# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-01 11:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/SpinalHDL/Developers area/types.rst:3
msgid "Types"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:10
msgid "Introduction"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:12
msgid "The language provides 5 base types and 2 composite types that can be used."
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:15
msgid "Base types : ``Bool``, ``Bits``, ``UInt`` for unsigned integers, ``SInt`` for signed integers, ``Enum``."
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:16
msgid "Composite types : Bundle, Vec."
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:22
msgid "Those types and their usage (with examples) are explained hereafter."
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:24
msgid "About the fixed point support it's documented :ref:`there <fixed>`"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:27
#: ../../source/SpinalHDL/Developers area/types.rst:45
#: ../../source/SpinalHDL/Developers area/types.rst:48
#: ../../source/SpinalHDL/Developers area/types.rst:51
#: ../../source/SpinalHDL/Developers area/types.rst:54
#: ../../source/SpinalHDL/Developers area/types.rst:79
#: ../../source/SpinalHDL/Developers area/types.rst:83
#: ../../source/SpinalHDL/Developers area/types.rst:87
#: ../../source/SpinalHDL/Developers area/types.rst:90
#: ../../source/SpinalHDL/Developers area/types.rst:99
#: ../../source/SpinalHDL/Developers area/types.rst:102
#: ../../source/SpinalHDL/Developers area/types.rst:105
#: ../../source/SpinalHDL/Developers area/types.rst:108
#: ../../source/SpinalHDL/Developers area/types.rst:111
#: ../../source/SpinalHDL/Developers area/types.rst:114
#: ../../source/SpinalHDL/Developers area/types.rst:240
#: ../../source/SpinalHDL/Developers area/types.rst:249
#: ../../source/SpinalHDL/Developers area/types.rst:258
#: ../../source/SpinalHDL/Developers area/types.rst:261
#: ../../source/SpinalHDL/Developers area/types.rst:270
#: ../../source/SpinalHDL/Developers area/types.rst:273
#: ../../source/SpinalHDL/Developers area/types.rst:276
#: ../../source/SpinalHDL/Developers area/types.rst:357
#: ../../source/SpinalHDL/Developers area/types.rst:360
#: ../../source/SpinalHDL/Developers area/types.rst:363
#: ../../source/SpinalHDL/Developers area/types.rst:366
#: ../../source/SpinalHDL/Developers area/types.rst:698
#: ../../source/SpinalHDL/Developers area/types.rst:701
msgid "Bool"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:29
msgid "This is the standard *boolean* type that correspond to a bit."
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:32
#: ../../source/SpinalHDL/Developers area/types.rst:411
msgid "Declaration"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:34
msgid "The syntax to declare such as value is as follows:"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:40
#: ../../source/SpinalHDL/Developers area/types.rst:130
msgid "Syntax"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:41
#: ../../source/SpinalHDL/Developers area/types.rst:75
#: ../../source/SpinalHDL/Developers area/types.rst:131
#: ../../source/SpinalHDL/Developers area/types.rst:157
#: ../../source/SpinalHDL/Developers area/types.rst:180
#: ../../source/SpinalHDL/Developers area/types.rst:224
#: ../../source/SpinalHDL/Developers area/types.rst:314
#: ../../source/SpinalHDL/Developers area/types.rst:344
#: ../../source/SpinalHDL/Developers area/types.rst:391
#: ../../source/SpinalHDL/Developers area/types.rst:412
#: ../../source/SpinalHDL/Developers area/types.rst:425
#: ../../source/SpinalHDL/Developers area/types.rst:654
#: ../../source/SpinalHDL/Developers area/types.rst:694
msgid "Description"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:42
#: ../../source/SpinalHDL/Developers area/types.rst:132
#: ../../source/SpinalHDL/Developers area/types.rst:225
#: ../../source/SpinalHDL/Developers area/types.rst:315
#: ../../source/SpinalHDL/Developers area/types.rst:345
#: ../../source/SpinalHDL/Developers area/types.rst:392
#: ../../source/SpinalHDL/Developers area/types.rst:426
#: ../../source/SpinalHDL/Developers area/types.rst:695
msgid "Return"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:43
msgid "Bool()"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:44
msgid "Create a Bool"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:46
msgid "True"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:47
msgid "Create a Bool assigned with ``true``"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:49
msgid "False"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:50
msgid "Create a Bool assigned with ``false``"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:52
msgid "Bool(value : Boolean)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:53
msgid "Create a Bool assigned with a Scala Boolean"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:57
msgid "Using this type into SpinalHDL yields:"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:66
#: ../../source/SpinalHDL/Developers area/types.rst:217
msgid "Operators"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:68
msgid "The following operators are available for the ``Bool`` type"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:74
#: ../../source/SpinalHDL/Developers area/types.rst:223
#: ../../source/SpinalHDL/Developers area/types.rst:313
#: ../../source/SpinalHDL/Developers area/types.rst:343
#: ../../source/SpinalHDL/Developers area/types.rst:390
#: ../../source/SpinalHDL/Developers area/types.rst:424
#: ../../source/SpinalHDL/Developers area/types.rst:693
msgid "Operator"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:76
msgid "Return type"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:77
msgid "!x"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:78
msgid "Logical NOT"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:0
msgid "x && y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:0
#: ../../source/SpinalHDL/Developers area/types.rst:229
msgid "x & y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:82
msgid "Logical AND"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:0
msgid "x || y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:0
#: ../../source/SpinalHDL/Developers area/types.rst:232
msgid "x | y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:86
msgid "Logical OR"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:88
#: ../../source/SpinalHDL/Developers area/types.rst:235
msgid "x ^ y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:89
msgid "Logical XOR"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:91
msgid "x.set[()]"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:92
msgid "Set x to True"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:94
msgid "x.clear[()]"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:95
msgid "Set x to False"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:97
msgid "x.rise[()]"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:98
msgid "Return True when x was low at the last cycle and is now high"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:100
msgid "x.rise(initAt : Bool)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:101
msgid "Same as x.rise but with a reset value"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:103
msgid "x.fall[()]"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:104
msgid "Return True when x was high at the last cycle and is now low"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:106
msgid "x.fall(initAt : Bool)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:107
msgid "Same as x.fall but with a reset value"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:109
msgid "x.setWhen(cond)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:110
msgid "Set x when cond is True"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:112
msgid "x.clearWhen(cond)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:113
msgid "Clear x when cond is True"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:118
msgid "The BitVector family - (``Bits``, ``UInt``, ``SInt``)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:120
msgid "``BitVector`` is a family of types for storing multiple bits of information in a single value. This type has three subtypes that can be used to model different behaviours:"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:121
msgid "``Bits`` do not convey any sign information whereas the ``UInt`` (unsigned integer) and ``SInt`` (signed integer) provide the required operations to compute correct results if signed / unsigned arithmetics is used."
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:124
msgid "Declaration syntax"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:133
msgid "Bits/UInt/SInt [()]"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:134
msgid "Create a BitVector, bits count is inferred"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:135
#: ../../source/SpinalHDL/Developers area/types.rst:138
#: ../../source/SpinalHDL/Developers area/types.rst:141
#: ../../source/SpinalHDL/Developers area/types.rst:144
#: ../../source/SpinalHDL/Developers area/types.rst:147
msgid "Bits/UInt/SInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:136
msgid "Bits/UInt/SInt(x bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:137
msgid "Create a BitVector with x bits"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:139
msgid "B/U/S(value : Int[,width : BitCount])"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:140
#: ../../source/SpinalHDL/Developers area/types.rst:143
msgid "Create a BitVector assigned with 'value'"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:142
msgid "B/U/S\"[[size']base]value\""
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:145
msgid "B/U/S([x bits], element, ...)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:146
msgid "Create a BitVector assigned with the value specified by elements (see bellow table)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:150
msgid "Elements could be defined as follows:"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:156
msgid "Element syntax"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:158
msgid "x : Int -> y : Boolean/Bool"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:159
msgid "Set bit x with y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:160
msgid "x : Range -> y : Boolean/Bool"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:161
msgid "Set each bits in range x with y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:162
#: ../../source/SpinalHDL/Developers area/types.rst:167
msgid "x : Range -> y : T"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:0
#: ../../source/SpinalHDL/Developers area/types.rst:163
#: ../../source/SpinalHDL/Developers area/types.rst:168
msgid "Set bits in range x with y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:164
msgid "x : Range -> y : String"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:0
msgid "The string format follow same rules than B/U/S\"xyz\" one"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:169
msgid "default -> y : Boolean/Bool"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:0
msgid "Set all unconnected bits with the y value."
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:0
msgid "This feature could only be use to do assignments without the U/B/S prefix"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:174
msgid "You can define a Range values"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:179
msgid "Range syntax"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:181
msgid "Width"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:182
msgid "(x downto y)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:183
msgid "[x:y] x >= y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:184
msgid "x-y+1"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:185
msgid "(x to y)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:186
msgid "[x:y] x <= y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:187
msgid "y-x+1"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:188
msgid "(x until y)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:189
msgid "[x:y[ x < y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:190
msgid "y-x"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:226
msgid "~x"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:227
msgid "Bitwise NOT"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:228
#: ../../source/SpinalHDL/Developers area/types.rst:321
#: ../../source/SpinalHDL/Developers area/types.rst:372
msgid "T(w(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:230
msgid "Bitwise AND"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:231
#: ../../source/SpinalHDL/Developers area/types.rst:234
#: ../../source/SpinalHDL/Developers area/types.rst:237
#: ../../source/SpinalHDL/Developers area/types.rst:348
#: ../../source/SpinalHDL/Developers area/types.rst:351
#: ../../source/SpinalHDL/Developers area/types.rst:713
msgid "T(max(w(x), w(y) bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:233
msgid "Bitwise OR"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:236
msgid "Bitwise XOR"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:238
#: ../../source/SpinalHDL/Developers area/types.rst:427
msgid "x(y)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:239
msgid "Readbit, y : Int/UInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:241
msgid "x(hi,lo)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:242
msgid "Read bitfield, hi : Int, lo : Int"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:243
#: ../../source/SpinalHDL/Developers area/types.rst:252
#: ../../source/SpinalHDL/Developers area/types.rst:722
msgid "T(hi-lo+1 bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:244
msgid "x(offset,width)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:245
msgid "Read bitfield, offset: UInt, width: Int"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:246
#: ../../source/SpinalHDL/Developers area/types.rst:255
#: ../../source/SpinalHDL/Developers area/types.rst:725
msgid "T(width bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:247
#: ../../source/SpinalHDL/Developers area/types.rst:430
msgid "x(y) := z"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:248
msgid "Assign bits, y : Int/UInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:250
msgid "x(hi,lo) := z"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:251
#: ../../source/SpinalHDL/Developers area/types.rst:721
msgid "Assign bitfield, hi : Int, lo : Int"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:253
msgid "x(offset,width) := z"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:254
#: ../../source/SpinalHDL/Developers area/types.rst:724
msgid "Assign bitfield, offset: UInt, width: Int"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:256
msgid "x.msb"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:257
msgid "Return the most significant bit"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:259
msgid "x.lsb"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:260
msgid "Return the least significant bit"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:262
msgid "x.range"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:263
msgid "Return the range (x.high downto 0)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:264
msgid "Range"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:265
msgid "x.high"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:266
msgid "Return the upper bound of the type x"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:267
#: ../../source/SpinalHDL/Developers area/types.rst:704
msgid "Int"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:268
msgid "x.xorR"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:269
msgid "XOR all bits of x"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:271
msgid "x.orR"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:272
msgid "OR all bits of x"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:274
msgid "x.andR"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:275
msgid "AND all bits of x"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:277
msgid "x.clearAll[()]"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:278
msgid "Clear all bits"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:279
#: ../../source/SpinalHDL/Developers area/types.rst:282
#: ../../source/SpinalHDL/Developers area/types.rst:429
#: ../../source/SpinalHDL/Developers area/types.rst:728
msgid "T"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:280
msgid "x.setAll[()]"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:281
msgid "Set all bits"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:283
msgid "x.setAllTo(value : Boolean)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:284
msgid "Set all bits to the given Boolean value"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:286
msgid "x.setAllTo(value : Bool)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:287
msgid "Set all bits to the given Bool value"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:289
msgid "x.asBools"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:290
msgid "Cast into a array of Bool"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:291
msgid "Vec(Bool(),width(x))"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:295
msgid "Masked comparison"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:297
msgid "Some time you need to check equality between a ``BitVector`` and a bits constant that contain hole (don't care values)."
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:299
msgid "There is an example about how to do that :"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:307
msgid "Bits"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:316
#: ../../source/SpinalHDL/Developers area/types.rst:319
#: ../../source/SpinalHDL/Developers area/types.rst:367
#: ../../source/SpinalHDL/Developers area/types.rst:370
msgid "x >> y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:317
msgid "Logical shift right, y : Int"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:318
#: ../../source/SpinalHDL/Developers area/types.rst:369
msgid "T(w(x) - y bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:320
msgid "Logical shift right, y : UInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:322
#: ../../source/SpinalHDL/Developers area/types.rst:325
#: ../../source/SpinalHDL/Developers area/types.rst:373
#: ../../source/SpinalHDL/Developers area/types.rst:376
msgid "x << y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:323
msgid "Logical shift left, y : Int"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:324
#: ../../source/SpinalHDL/Developers area/types.rst:375
msgid "T(w(x) + y bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:326
msgid "Logical shift left, y : UInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:327
#: ../../source/SpinalHDL/Developers area/types.rst:378
msgid "T(w(x) + max(y) bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:328
msgid "x.rotateLeft(y)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:329
msgid "Logical left rotation, y : UInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:330
msgid "T(w(x))"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:331
#: ../../source/SpinalHDL/Developers area/types.rst:379
msgid "x.resize(y)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:332
msgid "Return a resized copy of x, filled with zero, y : Int"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:333
#: ../../source/SpinalHDL/Developers area/types.rst:381
msgid "T(y bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:337
msgid "UInt, SInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:346
msgid "x + y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:347
msgid "Addition"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:349
msgid "x - y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:350
msgid "Subtraction"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:352
msgid "x * y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:353
msgid "Multiplication"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:354
msgid "T(w(x) + w(y) bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:355
msgid "x > y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:356
msgid "Greater than"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:358
msgid "x >= y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:359
msgid "Greater than or equal"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:361
msgid "x < y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:362
msgid "Less than"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:364
msgid "x <= y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:365
msgid "Less than or equal"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:368
msgid "Arithmetic shift right, y : Int"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:371
msgid "Arithmetic shift right, y : UInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:374
msgid "Arithmetic shift left, y : Int"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:377
msgid "Arithmetic shift left, y : UInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:380
msgid "Return an arithmetic resized copy of x, y : Int"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:385
msgid "Bool, Bits, UInt, SInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:393
#: ../../source/SpinalHDL/Developers area/types.rst:714
msgid "x.asBits"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:394
msgid "Binary cast in Bits"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:395
msgid "Bits(w(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:396
msgid "x.asUInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:397
msgid "Binary cast in UInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:398
msgid "UInt(w(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:399
msgid "x.asSInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:400
msgid "Binary cast in SInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:401
msgid "SInt(w(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:405
msgid "Vec"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:413
msgid "Vec(type : Data, size : Int)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:414
msgid "Create a vector of size time the given type"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:415
msgid "Vec(x,y,..)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:0
msgid "Create a vector where indexes point to given elements."
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:0
msgid "this construct support mixed element width"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:428
msgid "Read element y, y : Int/UInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:431
msgid "Assign element y with z, y : Int/UInt"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:451
msgid "Bundle"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:453
msgid "Bundles could be used to model data structure line buses and interfaces."
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:454
msgid "All attributes that extends Data (Bool, Bits, UInt, ...) that are defined inside the bundle are considered as part of the bundle."
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:457
msgid "Simple example (RGB/VGA)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:459
msgid "The following example show an RGB bundle definition with some internal function."
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:475
msgid "Then you can also incorporate a Bundle inside Bundle as deeply as you want:"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:485
msgid "And finaly instanciate your Bundles inside the hardware :"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:495
msgid "If you want to specify your bundle as an input or an output of a Component, you have to do it by the following way :"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:509
msgid "Interface example (APB)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:511
msgid "If you want to define an interface, let's imagine an APB interface, you can also use bundles :"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:537
msgid "One good practice is to group all construction parameters inside a configuration class. This could make the parametrization much easier later in your components, especially if you have to reuse the same configuration at multiple places. Also if one time you need to add another construction parameter, you will only have to add it into the configuration class and everywhere this one is instantiated:"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:564
msgid "Then at some points, you will probably need to use the APB bus as master or as slave interface of some components. To do that you can define some functions :"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:602
msgid "Then to make that better, the spinal.lib integrate a small master slave utile named IMasterSlave. When a bundle extends IMasterSlave, it should implement/override the asMaster function. It give you the ability to setup a master or a slave interface by a smoother way :"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:612
msgid "There is an example of an APB bus that implement this IMasterSlave :"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:644
msgid "Enum"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:646
msgid "SpinalHDL support enumeration with some encodings :"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:652
msgid "Encoding"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:653
msgid "Bit width"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:655
msgid "native"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:657
msgid "Use the VHDL enumeration system, this is the default encoding"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:658
msgid "binarySequancial"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:659
msgid "log2Up(stateCount)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:660
msgid "Use Bits to store states in declaration order (value from 0 to n-1)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:661
msgid "binaryOneHot"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:662
msgid "stateCount"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:663
msgid "Use Bits to store state. Each bit correspond to one state"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:666
msgid "Define a enumeration type:"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:674
msgid "Instantiate a enumeration signal and assign it :"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:686
msgid "Data (Bool, Bits, UInt, SInt, Enum, Bundle, Vec)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:688
msgid "All hardware types extends the Data class, which mean that all of them provide following operators :"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:696
msgid "x === y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:697
msgid "Equality"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:699
msgid "x =/= y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:700
msgid "Inequality"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:702
msgid "x.getWidth"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:703
msgid "Return bitcount"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:705
msgid "x ## y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:706
msgid "Concatenate, x->high, y->low"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:707
msgid "Bits(width(x) + width(y) bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:708
msgid "Cat(x)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:709
msgid "Concatenate list, first element on lsb, x : Array[Data]"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:710
msgid "Bits(sumOfWidth bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:711
msgid "Mux(cond,x,y)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:712
msgid "if cond ? x : y"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:715
msgid "Cast in Bits"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:716
msgid "Bits(width(x) bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:717
msgid "x.assignFromBits(bits)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:718
msgid "Assign from Bits"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:720
msgid "x.assignFromBits(bits,hi,lo)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:723
msgid "x.assignFromBits(bits,offset,width)"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:726
msgid "x.getZero"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:727
msgid "Get equivalent type assigned with zero"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:732
msgid "Literals as signal declaration"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:734
msgid "Literals are generally use as a constant value. But you can also use them to do two things in a single one :"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:737
msgid "Define a wire which is assigned with a constant value"
msgstr ""

#: ../../source/SpinalHDL/Developers area/types.rst:739
msgid "There is an example :"
msgstr ""
